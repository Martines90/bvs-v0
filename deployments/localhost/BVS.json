{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMINISTRATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CITIZEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLITICAL_ACTOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPER_ADMINISTRATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "fundedAmountInUsd",
          "type": "uint256"
        },
        {
          "internalType": "enum BVS_Funding.FundingSizeLevels",
          "name": "fundSizeLevel",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "citizens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeElections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePreElections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "electionCandidateScores",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "electionCandidates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "electionVoters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "electionVotes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionsEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionsStartDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminsSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCitizensSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionCandidatesSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getElectionVotersSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfFunders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoliticalActorsSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreElectionCandidatesSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPreElectionVotersSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getfundSizeLevel",
      "outputs": [
        {
          "internalType": "enum BVS_Funding.FundingSizeLevels",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAdministratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCitizenRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_votingCycleTotalCredit",
          "type": "uint16"
        }
      ],
      "name": "grantPoliticalActorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRoleWithSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "politicalActorProfiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "votingCycleTotalCredits",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "politicalActors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preElectionCandidateScores",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "preElectionCandidates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "preElectionVoters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preElectionVotes",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "candidate1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "candidate2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "candidate3",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "voteCount",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preElectionsEndDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preElectionsStartDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerAsPreElectionCandidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_preElectionsStartDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preElectionsEndDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_electionsStartDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_electionsEndDate",
          "type": "uint256"
        }
      ],
      "name": "scheduleNextElections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTenderBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voteOnAddress",
          "type": "address"
        }
      ],
      "name": "voteOnElections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voteOnAddress",
          "type": "address"
        }
      ],
      "name": "voteOnPreElections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ad2a8669e1d3ea2e4ff7d14db6918103a33f2d8abd6a92d52ff54538c84934f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3017213",
    "logsBloom": "0x
    "blockHash": "0x65c849c69f39943244a8af01ac86d5dfe45751aa18cc3a2bcc92b131bd4a0aee",
    "transactionHash": "0x4ad2a8669e1d3ea2e4ff7d14db6918103a33f2d8abd6a92d52ff54538c84934f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x4ad2a8669e1d3ea2e4ff7d14db6918103a33f2d8abd6a92d52ff54538c84934f",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9a",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x65c849c69f39943244a8af01ac86d5dfe45751aa18cc3a2bcc92b131bd4a0aee"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x4ad2a8669e1d3ea2e4ff7d14db6918103a33f2d8abd6a92d52ff54538c84934f",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b4661",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x65c849c69f39943244a8af01ac86d5dfe45751aa18cc3a2bcc92b131bd4a0aee"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x4ad2a8669e1d3ea2e4ff7d14db6918103a33f2d8abd6a92d52ff54538c84934f",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x65c849c69f39943244a8af01ac86d5dfe45751aa18cc3a2bcc92b131bd4a0aee"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3017213",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "9cbb7ce2c43328f1b5daa323ec52635c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMINISTRATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CITIZEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLITICAL_ACTOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMINISTRATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fundedAmountInUsd\",\"type\":\"uint256\"},{\"internalType\":\"enum BVS_Funding.FundingSizeLevels\",\"name\":\"fundSizeLevel\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeElections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePreElections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"electionCandidateScores\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"electionCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"electionVoters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"electionVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionsEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionsStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCitizensSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionCandidatesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElectionVotersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfFunders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoliticalActorsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreElectionCandidatesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreElectionVotersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getfundSizeLevel\",\"outputs\":[{\"internalType\":\"enum BVS_Funding.FundingSizeLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAdministratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCitizenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_votingCycleTotalCredit\",\"type\":\"uint16\"}],\"name\":\"grantPoliticalActorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleWithSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"politicalActorProfiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"votingCycleTotalCredits\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"politicalActors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preElectionCandidateScores\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preElectionCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preElectionVoters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preElectionVotes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"candidate3\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"voteCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preElectionsEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preElectionsStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAsPreElectionCandidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_preElectionsStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preElectionsEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_electionsStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_electionsEndDate\",\"type\":\"uint256\"}],\"name\":\"scheduleNextElections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTenderBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteOnAddress\",\"type\":\"address\"}],\"name\":\"voteOnElections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteOnAddress\",\"type\":\"address\"}],\"name\":\"voteOnPreElections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.\",\"params\":{\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"grantRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.\",\"params\":{\"account\":\"Address of the account to which the role is being granted.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRoleWithSwitch(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}}},\"title\":\"Balanced Voting System contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"notice\":\"Returns the admin role that controls the specified role.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account, if not previously granted.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role.\"},\"hasRoleWithSwitch(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role;                  role restrictions can be swtiched on and off.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes role from the account.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes role from an account.\"}},\"notice\":\"@dev\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BVS.sol\":\"BVS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/extension/Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IPermissions.sol\\\";\\nimport \\\"../lib/Strings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\ncontract Permissions is IPermissions {\\n    /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n    mapping(bytes32 => mapping(address => bool)) private _hasRole;\\n\\n    /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n    mapping(bytes32 => bytes32) private _getRoleAdmin;\\n\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        if (!_hasRole[role][address(0)]) {\\n            return _hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        return _getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        if (_hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (msg.sender != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin[role];\\n        _getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _hasRole[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        _checkRole(role, account);\\n        delete _hasRole[role][account];\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d0e92086fc4427a5f041525a40499c4eb6d9dc6a5eb8c8358275527ef3ce383\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xc0cd1f87bac474a06f85e2b341b9b57662aee957fc24180d42c872481c2f2ae3\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {\\n\\n            } iszero(eq(raw, end)) {\\n\\n            } {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\"},\"contracts/BVS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\n\\nimport \\\"./BVS_Funding.sol\\\";\\nimport \\\"./BVS_Elections.sol\\\";\\n\\n/**\\n * @title Balanced Voting System contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS is BVS_Elections, BVS_Funding {\\n    constructor(address priceFeed) BVS_Funding(priceFeed) BVS_Elections() {}\\n\\n    function unlockTenderBudget() public onlyRole(POLITICAL_ACTOR) {\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb7c067bb1a816b4ac0bd6c3a869784dcb353bc84275a5a66a8577638152572cd\",\"license\":\"MIT\"},\"contracts/BVS_Elections.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\n\\nimport \\\"./BVS_Roles.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Balanced Voting System: Elections contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS_Elections is BVS_Roles {\\n    uint256 constant ELECTION_START_END_INTERVAL = 30 days;\\n    uint256 constant MINIMUM_PERCENTAGE_OF_PRE_ELECTION_VOTES = 20;\\n    uint256 constant MINIMUM_PERCENTAGE_OF_ELECTION_VOTES = 10;\\n\\n    uint256 constant MAXIMUM_NUMBER_OF_PRE_ELECTION_VOTES = 3;\\n\\n    uint256 public preElectionsStartDate;\\n    uint256 public preElectionsEndDate;\\n    uint256 public electionsStartDate;\\n    uint256 public electionsEndDate;\\n\\n    struct PreElectionVoter {\\n        address account;\\n        address candidate1;\\n        address candidate2;\\n        address candidate3;\\n        uint16 voteCount;\\n    }\\n\\n    struct ElectionVoter {\\n        address account;\\n        address candidate1;\\n    }\\n\\n    address[] public preElectionCandidates;\\n    address[] public preElectionVoters;\\n    mapping(address => PreElectionVoter) public preElectionVotes;\\n    mapping(address => uint32) public preElectionCandidateScores;\\n\\n    address[] public electionCandidates;\\n    address[] public electionVoters;\\n    mapping(address => address) public electionVotes;\\n    mapping(address => uint32) public electionCandidateScores;\\n\\n    constructor() BVS_Roles() {}\\n\\n    function scheduleNextElections(\\n        uint256 _preElectionsStartDate,\\n        uint256 _preElectionsEndDate,\\n        uint256 _electionsStartDate,\\n        uint256 _electionsEndDate\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(electionsStartDate == 0, \\\"Previous elections has to be closed\\\");\\n        require(\\n            _preElectionsStartDate > block.timestamp + 30 days,\\n            \\\"Next election start date has to be at least 30 days planned ahead from now\\\"\\n        );\\n\\n        preElectionsStartDate = _preElectionsStartDate;\\n        preElectionsEndDate = _preElectionsEndDate;\\n        electionsStartDate = _electionsStartDate;\\n        electionsEndDate = _electionsEndDate;\\n    }\\n\\n    function closePreElections() public onlyRole(ADMINISTRATOR) {\\n        require(\\n            preElectionsEndDate + 7 days < block.timestamp,\\n            \\\"Pre elections can only close after 7 days of its end\\\"\\n        );\\n\\n        // process data\\n        uint256 numOfPreElectionVoters = preElectionVoters.length;\\n        uint256 numOfPreElectionCandidates = preElectionCandidates.length;\\n\\n        for (uint256 i = 0; i < numOfPreElectionCandidates; i++) {\\n            uint256 voterSupportPercentage = ((preElectionCandidateScores[\\n                preElectionCandidates[i]\\n            ] - 1) * 100) / numOfPreElectionVoters;\\n\\n            if (\\n                voterSupportPercentage >\\n                MINIMUM_PERCENTAGE_OF_PRE_ELECTION_VOTES\\n            ) {\\n                electionCandidates.push(preElectionCandidates[i]);\\n                electionCandidateScores[preElectionCandidates[i]] = 1;\\n            }\\n        }\\n\\n        // clean data\\n        for (uint i = 0; i < numOfPreElectionCandidates; i++) {\\n            delete preElectionCandidateScores[preElectionCandidates[i]];\\n        }\\n\\n        for (uint i = 0; i < numOfPreElectionVoters; i++) {\\n            delete preElectionVotes[preElectionVoters[i]];\\n        }\\n\\n        preElectionCandidates = new address[](0);\\n        preElectionVoters = new address[](0);\\n        preElectionsStartDate = 0;\\n        preElectionsEndDate = 0;\\n    }\\n\\n    function closeElections() public onlyRole(ADMINISTRATOR) {\\n        require(\\n            preElectionsEndDate == 0,\\n            \\\"Pre elections has to be close first\\\"\\n        );\\n        require(\\n            electionsStartDate != 0,\\n            \\\"Elections already closed or not yet planned\\\"\\n        );\\n        require(\\n            electionsEndDate + 7 days < block.timestamp,\\n            \\\"Elections can only close after 7 days of its end\\\"\\n        );\\n\\n        // revoke POLITICAL_ACTOR role from the previous cycle political actors\\n        for (uint i = 0; i < politicalActors.length; i++) {\\n            _revokeRole(POLITICAL_ACTOR, politicalActors[i]);\\n            delete politicalActorProfiles[politicalActors[i]];\\n        }\\n        politicalActors = new address[](0);\\n\\n        // assign roles to the winners\\n        uint256 totalVotes = electionVoters.length;\\n        for (uint i = 0; i < electionCandidates.length; i++) {\\n            uint256 votesOwnedPercentage = ((electionCandidateScores[\\n                electionCandidates[i]\\n            ] - 1) * 100) / totalVotes;\\n\\n            if (votesOwnedPercentage > MINIMUM_PERCENTAGE_OF_ELECTION_VOTES) {\\n                uint256 votingCycleTotalCredit = (votesOwnedPercentage -\\n                    MINIMUM_PERCENTAGE_OF_ELECTION_VOTES) / 10;\\n                grantPoliticalActorRole(\\n                    electionCandidates[i],\\n                    uint16(votingCycleTotalCredit)\\n                );\\n            }\\n        }\\n\\n        for (uint i = 0; i < electionCandidates.length; i++) {\\n            delete electionCandidateScores[electionCandidates[i]];\\n        }\\n\\n        electionCandidates = new address[](0);\\n        electionVoters = new address[](0);\\n\\n        electionsStartDate = 0;\\n    }\\n\\n    function registerAsPreElectionCandidate() public payable onlyRole(CITIZEN) {\\n        require(\\n            preElectionsStartDate > 0,\\n            \\\"Pre elections not scheduled or already closed\\\"\\n        );\\n        require(\\n            preElectionsStartDate > block.timestamp,\\n            \\\"Pre elections is already in progress\\\"\\n        );\\n        require(\\n            preElectionCandidateScores[msg.sender] == 0,\\n            \\\"You are already registered as a candidate\\\"\\n        );\\n\\n        preElectionCandidates.push(msg.sender);\\n        preElectionCandidateScores[msg.sender] = 1;\\n    }\\n\\n    function voteOnPreElections(\\n        address voteOnAddress\\n    ) public onlyRole(CITIZEN) {\\n        PreElectionVoter memory preElectionVoter = preElectionVotes[msg.sender];\\n        require(\\n            block.timestamp > preElectionsStartDate &&\\n                preElectionsStartDate != 0,\\n            \\\"Pre elections not yet started\\\"\\n        );\\n        require(\\n            block.timestamp < preElectionsEndDate,\\n            \\\"Pre elections already closed\\\"\\n        );\\n        require(\\n            preElectionVoter.voteCount != 3,\\n            \\\"You already used your 3 vote credit on the pre elections\\\"\\n        );\\n\\n        require(\\n            preElectionCandidateScores[voteOnAddress] > 0,\\n            \\\"Under the provided address there is no registered pre election candidate\\\"\\n        );\\n\\n        require(msg.sender != voteOnAddress, \\\"You can't vote on yourself\\\");\\n\\n        if (preElectionVoter.voteCount == 0) {\\n            preElectionVoters.push(msg.sender);\\n            preElectionVotes[msg.sender] = PreElectionVoter(\\n                msg.sender,\\n                voteOnAddress,\\n                address(0),\\n                address(0),\\n                1\\n            );\\n        } else {\\n            require(\\n                !(preElectionVoter.candidate1 == voteOnAddress ||\\n                    preElectionVoter.candidate2 == voteOnAddress ||\\n                    preElectionVoter.candidate3 == voteOnAddress),\\n                \\\"You can't vote on the same candidate more than once\\\"\\n            );\\n\\n            if (preElectionVoter.candidate2 == address(0)) {\\n                preElectionVotes[msg.sender].candidate2 = voteOnAddress;\\n            } else {\\n                preElectionVotes[msg.sender].candidate3 = voteOnAddress;\\n            }\\n\\n            preElectionVotes[msg.sender].voteCount++;\\n        }\\n        preElectionCandidateScores[voteOnAddress]++;\\n    }\\n\\n    function voteOnElections(address voteOnAddress) public onlyRole(CITIZEN) {\\n        require(\\n            0 == preElectionsStartDate,\\n            \\\"Pre elections not yet closed or scheduled\\\"\\n        );\\n        require(\\n            block.timestamp > electionsStartDate && electionsStartDate != 0,\\n            \\\"Elections not yet started\\\"\\n        );\\n        require(block.timestamp < electionsEndDate, \\\"Elections already closed\\\");\\n        require(msg.sender != voteOnAddress, \\\"You can't vote on yourself\\\");\\n        require(\\n            electionCandidateScores[voteOnAddress] > 0,\\n            \\\"The provided account address not belong to any candidate\\\"\\n        );\\n        require(electionVotes[msg.sender] == address(0), \\\"You already voted\\\");\\n\\n        electionVotes[msg.sender] = voteOnAddress;\\n        electionVoters.push(msg.sender);\\n        electionCandidateScores[voteOnAddress]++;\\n    }\\n\\n    function getPreElectionCandidatesSize() public view returns (uint256) {\\n        return preElectionCandidates.length;\\n    }\\n\\n    function getPreElectionVotersSize() public view returns (uint256) {\\n        return preElectionVoters.length;\\n    }\\n\\n    function getElectionCandidatesSize() public view returns (uint256) {\\n        return electionCandidates.length;\\n    }\\n\\n    function getElectionVotersSize() public view returns (uint256) {\\n        return electionVoters.length;\\n    }\\n}\\n\",\"keccak256\":\"0xbbc70bfd0b6dcba7d1179a2ae9442aa59d766829cdc1efc7761e83b76884cc86\",\"license\":\"MIT\"},\"contracts/BVS_Funding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n/**\\n * @title Balanced Voting System - Funding - contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS_Funding {\\n    enum FundingSizeLevels {\\n        SMALL,\\n        MEDIUM,\\n        LARGE,\\n        XLARGE,\\n        XXLARGE,\\n        XXXLARGE\\n    }\\n    struct FundSizes {\\n        uint256 small;\\n        uint256 medium;\\n        uint256 large;\\n        uint256 xlarge;\\n        uint256 xxlarge;\\n        uint256 xxxlarge;\\n    }\\n    struct FunderTicket {\\n        address account;\\n        string email;\\n        uint256 fundedAmountInUsd;\\n        FundingSizeLevels fundSizeLevel;\\n        bool exists;\\n    }\\n\\n    uint256 public constant DECIMALS = 10 ** 18;\\n\\n    FundSizes fundSizes =\\n        FundSizes(\\n            DECIMALS * 100,\\n            DECIMALS * 1000,\\n            DECIMALS * 10000,\\n            DECIMALS * 100000,\\n            DECIMALS * 500000,\\n            DECIMALS * 1000000\\n        );\\n\\n    AggregatorV3Interface public immutable priceFeed;\\n\\n    mapping(address => FunderTicket) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    constructor(address priceFeedAddress) {\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund(string memory email) public payable {\\n        uint256 amount = PriceConverter.getConversionRate(msg.value, priceFeed);\\n        require(amount >= fundSizes.small, \\\"You need to spend more ETH!\\\");\\n\\n        if (!addressToAmountFunded[msg.sender].exists) {\\n            funders.push(msg.sender);\\n            addressToAmountFunded[msg.sender] = FunderTicket(\\n                msg.sender,\\n                email,\\n                amount,\\n                getfundSizeLevel(amount),\\n                true\\n            );\\n        } else {\\n            addressToAmountFunded[msg.sender].fundedAmountInUsd += amount;\\n            addressToAmountFunded[msg.sender].fundSizeLevel = getfundSizeLevel(\\n                addressToAmountFunded[msg.sender].fundedAmountInUsd\\n            );\\n        }\\n    }\\n\\n    function getfundSizeLevel(\\n        uint256 amount\\n    ) public view returns (FundingSizeLevels) {\\n        if (amount >= fundSizes.xxxlarge) {\\n            return FundingSizeLevels.XXXLARGE;\\n        }\\n        if (amount >= fundSizes.xxlarge) {\\n            return FundingSizeLevels.XXLARGE;\\n        }\\n        if (amount >= fundSizes.xlarge) {\\n            return FundingSizeLevels.XLARGE;\\n        }\\n        if (amount >= fundSizes.large) {\\n            return FundingSizeLevels.LARGE;\\n        }\\n        if (amount >= fundSizes.medium) {\\n            return FundingSizeLevels.MEDIUM;\\n        }\\n        return FundingSizeLevels.SMALL;\\n    }\\n\\n    function getNumberOfFunders() public view returns (uint256) {\\n        return funders.length;\\n    }\\n\\n    receive() external payable {\\n        // This function is executed when a contract receives plain Ether (without data)\\n    }\\n}\\n\",\"keccak256\":\"0x00eff04434a9ef7a2df4a0446460fca2ce81146024a953435c7f88f521dcae3d\",\"license\":\"MIT\"},\"contracts/BVS_Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Balanced Voting System:Roles - contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS_Roles is Permissions {\\n    bytes32 public constant SUPER_ADMINISTRATOR =\\n        keccak256(\\\"SUPER_ADMINISTRATOR\\\");\\n    bytes32 public constant ADMINISTRATOR = keccak256(\\\"ADMINISTRATOR\\\");\\n    bytes32 public constant POLITICAL_ACTOR = keccak256(\\\"POLITICAL_ACTOR\\\");\\n    bytes32 public constant CITIZEN = keccak256(\\\"CITIZEN\\\");\\n\\n    struct PoliticalActorProfile {\\n        address account;\\n        uint16 votingCycleTotalCredits;\\n    }\\n\\n    address[] public admins;\\n    address[] public politicalActors;\\n    mapping(address => PoliticalActorProfile) public politicalActorProfiles;\\n    address[] public citizens;\\n\\n    constructor() {\\n        admins.push(msg.sender);\\n        citizens.push(msg.sender);\\n\\n        _setupRole(SUPER_ADMINISTRATOR, msg.sender);\\n        _setupRole(ADMINISTRATOR, msg.sender);\\n        _setupRole(CITIZEN, msg.sender);\\n    }\\n\\n    function grantPoliticalActorRole(\\n        address account,\\n        uint16 _votingCycleTotalCredit\\n    ) public onlyRole(SUPER_ADMINISTRATOR) {\\n        require(\\n            !hasRole(POLITICAL_ACTOR, account),\\n            \\\"Political actor role to this address alredy granted\\\"\\n        );\\n        _setupRole(POLITICAL_ACTOR, account);\\n        politicalActorProfiles[account] = PoliticalActorProfile(\\n            account,\\n            _votingCycleTotalCredit\\n        );\\n        politicalActors.push(account);\\n    }\\n\\n    function grantAdministratorRole(\\n        address account\\n    ) public onlyRole(SUPER_ADMINISTRATOR) {\\n        require(\\n            !hasRole(ADMINISTRATOR, account),\\n            \\\"Admin role to this address already granted\\\"\\n        );\\n        _setupRole(ADMINISTRATOR, account);\\n        admins.push(account);\\n    }\\n\\n    function grantCitizenRole(address account) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            !hasRole(CITIZEN, account),\\n            \\\"Citizen role to this address already granted\\\"\\n        );\\n        _setupRole(CITIZEN, account);\\n        citizens.push(account);\\n    }\\n\\n    function getAdminsSize() public view returns (uint256) {\\n        return admins.length;\\n    }\\n\\n    function getCitizensSize() public view returns (uint256) {\\n        return citizens.length;\\n    }\\n\\n    function getPoliticalActorsSize() public view returns (uint256) {\\n        return politicalActors.length;\\n    }\\n}\\n\",\"keccak256\":\"0x85e22fbeed1a4ed74e259bd48104393ecbf683ee7adcc7f8f15a7678945207e8\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xea2045155143e9bb1871bfa4970654b6aa7a401fbe94eaea250048f99c73384d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405260a0806200001d670de0b6b3a7640000606462000274565b815260200162000038670de0b6b3a76400006103e862000274565b815260200162000053670de0b6b3a764000061271062000274565b81526020016200006f670de0b6b3a7640000620186a062000274565b81526020016200008b670de0b6b3a76400006207a12062000274565b8152602001620000a7670de0b6b3a7640000620f424062000274565b90528051601255602081015160135560408101516014556060810151601555608081015160165560a00151601755348015620000e257600080fd5b5060405162003309380380620033098339810160408190526200010591620002a0565b6002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b031991821681179092556005805493840181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0909201805490921681179091558190620001b0907fd9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9a906200021b565b620001dc7fb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b4661336200021b565b620002087f313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9336200021b565b6001600160a01b031660805250620002d2565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b80820281158282048414176200029a57634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215620002b357600080fd5b81516001600160a01b0381168114620002cb57600080fd5b9392505050565b608051613014620002f5600039600081816106f5015261154e01526130146000f3fe6080604052600436106102b85760003560e01c80636bcd1e1011610170578063a9914e99116100cc578063d13b9dc411610085578063d13b9dc4146108de578063d3bb6c1214610943578063d547741f14610958578063d9b1962214610978578063dc0d3dff1461098d578063dce85be9146109ad578063e64ae4bd146109c357600080fd5b8063a9914e9914610847578063bbc391281461085c578063bdfc1a2414610871578063c84d22141461089e578063cce8c26a146108b4578063cf9947fd146108c957600080fd5b806381c184d31161012957806381c184d31461076d5780638b469b8e1461078d5780638bc71516146107a257806391d14854146107c257806393e0eb03146107f2578063a217fddf14610812578063a32fa5b31461082757600080fd5b80636bcd1e10146106c857806373451f65146106d0578063741bef1a146106e35780637a8ffb3e146107175780637b7abea71461072d5780637ec55e5f1461074d57600080fd5b80633378f39e1161021f57806349900c0f116101d857806349900c0f146105da57806353167f97146105ef578063532da8e31461062257806359fe72791461064457806361172eb31461066657806367fadfd9146106865780636b4a4232146106a857600080fd5b80633378f39e14610496578063340b3da9146104b657806336568abe146105545780633e47d6f3146105745780634337b845146105a5578063447c9d2a146105c557600080fd5b80631db6d106116102715780631db6d106146103975780631f0317b4146103cd57806323559c57146103e3578063248a9ca31461042b5780632e0f2625146104585780632f2ff15d1461047457600080fd5b806309a34f00146102c457806309d39b791461030157806314bfd6d01461032157806314e00b6d1461034157806315382ab71461036057806319d3cfd41461038257600080fd5b366102bf57005b600080fd5b3480156102d057600080fd5b506102e46102df3660046128ef565b6109e3565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561030d57600080fd5b506102e461031c3660046128ef565b610a0d565b34801561032d57600080fd5b506102e461033c3660046128ef565b610a1d565b34801561034d57600080fd5b50600f545b6040519081526020016102f8565b34801561036c57600080fd5b50610352600080516020612fbf83398151915281565b34801561038e57600080fd5b50600554610352565b3480156103a357600080fd5b506102e46103b2366004612924565b6010602052600090815260409020546001600160a01b031681565b3480156103d957600080fd5b5061035260085481565b3480156103ef57600080fd5b506104166103fe366004612924565b60116020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016102f8565b34801561043757600080fd5b506103526104463660046128ef565b60009081526001602052604090205490565b34801561046457600080fd5b50610352670de0b6b3a764000081565b34801561048057600080fd5b5061049461048f36600461293f565b610a2d565b005b3480156104a257600080fd5b506102e46104b13660046128ef565b610aca565b3480156104c257600080fd5b506105166104d1366004612924565b600c6020526000908152604090208054600182015460028301546003909301546001600160a01b03928316939183169291821691811690600160a01b900461ffff1685565b604080516001600160a01b039687168152948616602086015292851692840192909252909216606082015261ffff909116608082015260a0016102f8565b34801561056057600080fd5b5061049461056f36600461293f565b610ada565b34801561058057600080fd5b5061059461058f366004612924565b610b3c565b6040516102f89594939291906129f3565b3480156105b157600080fd5b506104946105c0366004612924565b610c04565b3480156105d157600080fd5b50600a54610352565b3480156105e657600080fd5b50610494610ed9565b3480156105fb57600080fd5b5061041661060a366004612924565b600d6020526000908152604090205463ffffffff1681565b34801561062e57600080fd5b50610352600080516020612f7f83398151915281565b34801561065057600080fd5b50610352600080516020612f5f83398151915281565b34801561067257600080fd5b50610494610681366004612924565b611285565b34801561069257600080fd5b50610352600080516020612f9f83398151915281565b3480156106b457600080fd5b506102e46106c33660046128ef565b611383565b610494611393565b6104946106de366004612a54565b611546565b3480156106ef57600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561072357600080fd5b5061035260075481565b34801561073957600080fd5b50610494610748366004612b05565b61177b565b34801561075957600080fd5b506102e46107683660046128ef565b611899565b34801561077957600080fd5b50610494610788366004612b37565b6118a9565b34801561079957600080fd5b506104946119f8565b3480156107ae57600080fd5b506104946107bd366004612924565b611a97565b3480156107ce57600080fd5b506107e26107dd36600461293f565b611fbf565b60405190151581526020016102f8565b3480156107fe57600080fd5b5061049461080d366004612924565b611fea565b34801561081e57600080fd5b50610352600081565b34801561083357600080fd5b506107e261084236600461293f565b6120e6565b34801561085357600080fd5b50600e54610352565b34801561086857600080fd5b50600354610352565b34801561087d57600080fd5b5061089161088c3660046128ef565b612138565b6040516102f89190612b75565b3480156108aa57600080fd5b5061035260095481565b3480156108c057600080fd5b50601954610352565b3480156108d557600080fd5b50610494612198565b3480156108ea57600080fd5b506109216108f9366004612924565b6004602052600090815260409020546001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016102f8565b34801561094f57600080fd5b50600b54610352565b34801561096457600080fd5b5061049461097336600461293f565b6124b0565b34801561098457600080fd5b50600254610352565b34801561099957600080fd5b506102e46109a83660046128ef565b6124c9565b3480156109b957600080fd5b5061035260065481565b3480156109cf57600080fd5b506102e46109de3660046128ef565b6124d9565b600581815481106109f357600080fd5b6000918252602090912001546001600160a01b0316905081565b600381815481106109f357600080fd5b600281815481106109f357600080fd5b600082815260016020526040902054610a4690336124e9565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610abc5760405162461bcd60e51b815260206004820152601d60248201527f43616e206f6e6c79206772616e7420746f206e6f6e20686f6c6465727300000060448201526064015b60405180910390fd5b610ac68282612567565b5050565b600f81815481106109f357600080fd5b336001600160a01b03821614610b325760405162461bcd60e51b815260206004820152601a60248201527f43616e206f6e6c792072656e6f756e636520666f722073656c660000000000006044820152606401610ab3565b610ac682826125c0565b601860205260009081526040902080546001820180546001600160a01b039092169291610b6890612b83565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9490612b83565b8015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b50505050600283015460039093015491929160ff80821692506101009091041685565b600080516020612f9f833981519152610c1d81336124e9565b60065415610c7f5760405162461bcd60e51b815260206004820152602960248201527f50726520656c656374696f6e73206e6f742079657420636c6f736564206f72206044820152681cd8da19591d5b195960ba1b6064820152608401610ab3565b60085442118015610c91575060085415155b610cd95760405162461bcd60e51b8152602060048201526019602482015278115b1958dd1a5bdb9cc81b9bdd081e595d081cdd185c9d1959603a1b6044820152606401610ab3565b6009544210610d255760405162461bcd60e51b8152602060048201526018602482015277115b1958dd1a5bdb9cc8185b1c9958591e4818db1bdcd95960421b6044820152606401610ab3565b6001600160a01b0382163303610d4d5760405162461bcd60e51b8152600401610ab390612bbd565b6001600160a01b03821660009081526011602052604090205463ffffffff16610dd95760405162461bcd60e51b815260206004820152603860248201527f5468652070726f7669646564206163636f756e742061646472657373206e6f746044820152772062656c6f6e6720746f20616e792063616e64696461746560401b6064820152608401610ab3565b336000908152601060205260409020546001600160a01b031615610e335760405162461bcd60e51b8152602060048201526011602482015270165bdd48185b1c9958591e481d9bdd1959607a1b6044820152606401610ab3565b33600081815260106020908152604080832080546001600160a01b0388166001600160a01b03199182168117909255600f8054600181019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201805490911690951790945592825260119052908120805463ffffffff1691610eb683612c0a565b91906101000a81548163ffffffff021916908363ffffffff160217905550505050565b600080516020612f5f833981519152610ef281336124e9565b60075415610f4e5760405162461bcd60e51b815260206004820152602360248201527f50726520656c656374696f6e732068617320746f20626520636c6f73652066696044820152621c9cdd60ea1b6064820152608401610ab3565b600854600003610fb45760405162461bcd60e51b815260206004820152602b60248201527f456c656374696f6e7320616c726561647920636c6f736564206f72206e6f742060448201526a1e595d081c1b185b9b995960aa1b6064820152608401610ab3565b4260095462093a80610fc69190612c2d565b1061102c5760405162461bcd60e51b815260206004820152603060248201527f456c656374696f6e732063616e206f6e6c7920636c6f7365206166746572203760448201526f0819185e5cc81bd9881a5d1cc8195b9960821b6064820152608401610ab3565b60005b6003548110156110d357611078600080516020612f7f8339815191526003838154811061105e5761105e612c40565b6000918252602090912001546001600160a01b03166125c0565b600460006003838154811061108f5761108f612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546001600160b01b0319169055806110cb81612c56565b91505061102f565b5060408051600081526020810191829052516110f191600391612875565b50600f5460005b600e548110156111d957600082600160116000600e868154811061111e5761111e612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611153919063ffffffff16612c6f565b61115e906064612c93565b63ffffffff1661116e9190612cbb565b9050600a8111156111c6576000600a6111878184612cdd565b6111919190612cbb565b90506111c4600e84815481106111a9576111a9612c40565b6000918252602090912001546001600160a01b0316826118a9565b505b50806111d181612c56565b9150506110f8565b5060005b600e5481101561123f5760116000600e83815481106111fe576111fe612c40565b60009182526020808320909101546001600160a01b031683528201929092526040019020805463ffffffff191690558061123781612c56565b9150506111dd565b50604080516000815260208101918290525161125d91600e91612875565b50604080516000815260208101918290525161127b91600f91612875565b5050600060085550565b600080516020612f5f83398151915261129e81336124e9565b6112b6600080516020612f9f83398151915283611fbf565b156113185760405162461bcd60e51b815260206004820152602c60248201527f436974697a656e20726f6c6520746f2074686973206164647265737320616c7260448201526b1958591e4819dc985b9d195960a21b6064820152608401610ab3565b611330600080516020612f9f83398151915283612567565b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0392909216919091179055565b600a81815481106109f357600080fd5b600080516020612f9f8339815191526113ac81336124e9565b6000600654116114145760405162461bcd60e51b815260206004820152602d60248201527f50726520656c656374696f6e73206e6f74207363686564756c6564206f72206160448201526c1b1c9958591e4818db1bdcd959609a1b6064820152608401610ab3565b42600654116114715760405162461bcd60e51b8152602060048201526024808201527f50726520656c656374696f6e7320697320616c726561647920696e2070726f676044820152637265737360e01b6064820152608401610ab3565b336000908152600d602052604090205463ffffffff16156114e65760405162461bcd60e51b815260206004820152602960248201527f596f752061726520616c7265616479207265676973746572656420617320612060448201526863616e64696461746560b81b6064820152608401610ab3565b50600a805460018181019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916339081179091556000908152600d60205260409020805463ffffffff19169091179055565b6000611572347f0000000000000000000000000000000000000000000000000000000000000000612620565b6012549091508110156115c75760405162461bcd60e51b815260206004820152601b60248201527f596f75206e65656420746f207370656e64206d6f7265204554482100000000006044820152606401610ab3565b33600090815260186020526040902060030154610100900460ff1661170357601980546001810182556000919091527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950180546001600160a01b031916339081179091556040805160a0810182529182526020820184905281018290526060810161165183612138565b6005811115611662576116626129bb565b8152600160209182018190523360009081526018835260409020835181546001600160a01b0319166001600160a01b0390911617815591830151908201906116aa9082612d3f565b5060408201516002820155606082015160038201805460ff191660018360058111156116d8576116d86129bb565b021790555060809190910151600390910180549115156101000261ff00199092169190911790555050565b3360009081526018602052604081206002018054839290611725908490612c2d565b90915550503360009081526018602052604090206002015461174690612138565b336000908152601860205260409020600301805460ff19166001836005811115611772576117726129bb565b02179055505050565b600080516020612f5f83398151915261179481336124e9565b600854156117f05760405162461bcd60e51b815260206004820152602360248201527f50726576696f757320656c656374696f6e732068617320746f20626520636c6f6044820152621cd95960ea1b6064820152608401610ab3565b6117fd4262278d00612c2d565b85116118845760405162461bcd60e51b815260206004820152604a60248201527f4e65787420656c656374696f6e20737461727420646174652068617320746f2060448201527f6265206174206c65617374203330206461797320706c616e6e65642061686561606482015269642066726f6d206e6f7760b01b608482015260a401610ab3565b50600693909355600791909155600855600955565b600b81815481106109f357600080fd5b600080516020612fbf8339815191526118c281336124e9565b6118da600080516020612f7f83398151915284611fbf565b156119435760405162461bcd60e51b815260206004820152603360248201527f506f6c69746963616c206163746f7220726f6c6520746f2074686973206164646044820152721c995cdcc8185b1c99591e4819dc985b9d1959606a1b6064820152608401610ab3565b61195b600080516020612f7f83398151915284612567565b506040805180820182526001600160a01b0393841680825261ffff93841660208084019182526000838152600490915293842092518354915196166001600160b01b031990911617600160a01b9590941694909402929092179091556003805460018101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169091179055565b600080516020612f7f833981519152611a1181336124e9565b604051600090339047908381818185875af1925050503d8060008114611a53576040519150601f19603f3d011682016040523d82523d6000602084013e611a58565b606091505b5050905080610ac65760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606401610ab3565b600080516020612f9f833981519152611ab081336124e9565b336000908152600c6020908152604091829020825160a08101845281546001600160a01b03908116825260018301548116938201939093526002820154831693810193909352600301549081166060830152600160a01b900461ffff16608082015260065442118015611b24575060065415155b611b705760405162461bcd60e51b815260206004820152601d60248201527f50726520656c656374696f6e73206e6f742079657420737461727465640000006044820152606401610ab3565b6007544210611bc15760405162461bcd60e51b815260206004820152601c60248201527f50726520656c656374696f6e7320616c726561647920636c6f736564000000006044820152606401610ab3565b806080015161ffff16600303611c3a5760405162461bcd60e51b815260206004820152603860248201527f596f7520616c7265616479207573656420796f7572203320766f746520637265604482015277646974206f6e207468652070726520656c656374696f6e7360401b6064820152608401610ab3565b6001600160a01b0383166000908152600d602052604090205463ffffffff16611cdc5760405162461bcd60e51b815260206004820152604860248201527f556e646572207468652070726f7669646564206164647265737320746865726560448201527f206973206e6f20726567697374657265642070726520656c656374696f6e2063606482015267616e64696461746560c01b608482015260a401610ab3565b6001600160a01b0383163303611d045760405162461bcd60e51b8152600401610ab390612bbd565b806080015161ffff16600003611dfa57600b805460018181019092557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319908116339081179092556040805160a0810182528381526001600160a01b038881166020838101918252600084860181815260608601828152608087018b8152998352600c90935295902093518454908416908716178455905196830180549783169786169790971790965591516002820180549184169190941617909255925160039091018054925161ffff16600160a01b026001600160b01b03199093169190931617179055611f71565b826001600160a01b031681602001516001600160a01b03161480611e335750826001600160a01b031681604001516001600160a01b0316145b80611e535750826001600160a01b031681606001516001600160a01b0316145b15611ebc5760405162461bcd60e51b815260206004820152603360248201527f596f752063616e277420766f7465206f6e207468652073616d652063616e646960448201527264617465206d6f7265207468616e206f6e636560681b6064820152608401610ab3565b60408101516001600160a01b0316611efe57336000908152600c6020526040902060020180546001600160a01b0319166001600160a01b038516179055611f2a565b336000908152600c6020526040902060030180546001600160a01b0319166001600160a01b0385161790555b336000908152600c602052604090206003018054600160a01b900461ffff16906014611f5583612dff565b91906101000a81548161ffff021916908361ffff160217905550505b6001600160a01b0383166000908152600d60205260408120805463ffffffff1691611f9b83612c0a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b600080516020612fbf83398151915261200381336124e9565b61201b600080516020612f5f83398151915283611fbf565b1561207b5760405162461bcd60e51b815260206004820152602a60248201527f41646d696e20726f6c6520746f2074686973206164647265737320616c726561604482015269191e4819dc985b9d195960b21b6064820152608401610ab3565b612093600080516020612f5f83398151915283612567565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020818152604080832083805290915281205460ff1661212f57506000828152602081815260408083206001600160a01b038516845290915290205460ff16611fe4565b50600192915050565b601754600090821061214c57506005919050565b601654821061215d57506004919050565b601554821061216e57506003919050565b601454821061217f57506002919050565b601354821061219057506001919050565b506000919050565b600080516020612f5f8339815191526121b181336124e9565b4260075462093a806121c39190612c2d565b1061222d5760405162461bcd60e51b815260206004820152603460248201527f50726520656c656374696f6e732063616e206f6e6c7920636c6f736520616674604482015273195c880dc819185e5cc81bd9881a5d1cc8195b9960621b6064820152608401610ab3565b600b54600a5460005b81811015612371576000836001600d6000600a868154811061225a5761225a612c40565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461228f919063ffffffff16612c6f565b61229a906064612c93565b63ffffffff166122aa9190612cbb565b9050601481111561235e57600e600a83815481106122ca576122ca612c40565b600091825260208083209091015483546001818101865594845291832090910180546001600160a01b0319166001600160a01b03909216919091179055600a805460119291908690811061232057612320612c40565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805463ffffffff191663ffffffff929092169190911790555b508061236981612c56565b915050612236565b5060005b818110156123d557600d6000600a838154811061239457612394612c40565b60009182526020808320909101546001600160a01b031683528201929092526040019020805463ffffffff19169055806123cd81612c56565b915050612375565b5060005b8281101561246457600c6000600b83815481106123f8576123f8612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546001600160a01b0319908116825560018201805482169055600282018054909116905560030180546001600160b01b03191690558061245c81612c56565b9150506123d9565b50604080516000815260208101918290525161248291600a91612875565b5060408051600081526020810191829052516124a091600b91612875565b5050600060068190556007555050565b600082815260016020526040902054610b3290336124e9565b601981815481106109f357600080fd5b600e81815481106109f357600080fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610ac657612525816001600160a01b03166014612656565b612530836020612656565b604051602001612541929190612e16565b60408051601f198184030181529082905262461bcd60e51b8252610ab391600401612e83565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6125ca82826124e9565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008061262c836127f9565b90506000670de0b6b3a76400006126438684612e96565b61264d9190612cbb565b95945050505050565b60606000612665836002612e96565b612670906002612c2d565b67ffffffffffffffff81111561268857612688612a3e565b6040519080825280601f01601f1916602001820160405280156126b2576020820181803683370190505b509050600360fc1b816000815181106126cd576126cd612c40565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126fc576126fc612c40565b60200101906001600160f81b031916908160001a9053506000612720846002612e96565b61272b906001612c2d565b90505b60018111156127a3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061275f5761275f612c40565b1a60f81b82828151811061277557612775612c40565b60200101906001600160f81b031916908160001a90535060049490941c9361279c81612ead565b905061272e565b5083156127f25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ab3565b9392505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e9190612ede565b505050915050806402540be4006127f29190612f2e565b8280548282559060005260206000209081019282156128ca579160200282015b828111156128ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612895565b506128d69291506128da565b5090565b5b808211156128d657600081556001016128db565b60006020828403121561290157600080fd5b5035919050565b80356001600160a01b038116811461291f57600080fd5b919050565b60006020828403121561293657600080fd5b6127f282612908565b6000806040838503121561295257600080fd5b8235915061296260208401612908565b90509250929050565b60005b8381101561298657818101518382015260200161296e565b50506000910152565b600081518084526129a781602086016020860161296b565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600681106129ef57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038616815260a060208201819052600090612a179083018761298f565b9050846040830152612a2c60608301856129d1565b82151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612a6657600080fd5b813567ffffffffffffffff80821115612a7e57600080fd5b818401915084601f830112612a9257600080fd5b813581811115612aa457612aa4612a3e565b604051601f8201601f19908116603f01168101908382118183101715612acc57612acc612a3e565b81604052828152876020848701011115612ae557600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060008060808587031215612b1b57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612b4a57600080fd5b612b5383612908565b9150602083013561ffff81168114612b6a57600080fd5b809150509250929050565b60208101611fe482846129d1565b600181811c90821680612b9757607f821691505b602082108103612bb757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f596f752063616e277420766f7465206f6e20796f757273656c66000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103612c2357612c23612bf4565b6001019392505050565b80820180821115611fe457611fe4612bf4565b634e487b7160e01b600052603260045260246000fd5b600060018201612c6857612c68612bf4565b5060010190565b63ffffffff828116828216039080821115612c8c57612c8c612bf4565b5092915050565b63ffffffff818116838216028082169190828114612cb357612cb3612bf4565b505092915050565b600082612cd857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611fe457611fe4612bf4565b601f821115612d3a57600081815260208120601f850160051c81016020861015612d175750805b601f850160051c820191505b81811015612d3657828155600101612d23565b5050505b505050565b815167ffffffffffffffff811115612d5957612d59612a3e565b612d6d81612d678454612b83565b84612cf0565b602080601f831160018114612da25760008415612d8a5750858301515b600019600386901b1c1916600185901b178555612d36565b600085815260208120601f198616915b82811015612dd157888601518255948401946001909101908401612db2565b5085821015612def5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808316818103612c2357612c23612bf4565b7402832b936b4b9b9b4b7b7399d1030b1b1b7bab73a1605d1b815260008351612e4681601585016020880161296b565b7001034b99036b4b9b9b4b733903937b6329607d1b6015918401918201528351612e7781602684016020880161296b565b01602601949350505050565b6020815260006127f2602083018461298f565b8082028115828204841417611fe457611fe4612bf4565b600081612ebc57612ebc612bf4565b506000190190565b805169ffffffffffffffffffff8116811461291f57600080fd5b600080600080600060a08688031215612ef657600080fd5b612eff86612ec4565b9450602086015193506040860151925060608601519150612f2260808701612ec4565b90509295509295909350565b80820260008212600160ff1b84141615612f4a57612f4a612bf4565b8181058314821517611fe457611fe4612bf456feb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b46619f70d138cbbd87297896478196b4493d9dceaca01f5883ecbd7bee66d300348d313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9d9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9aa26469706673582212202a8db2801cbd3432113a4b1fc59d007ae00333edbe1ff3f31a741667da07a05d64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102b85760003560e01c80636bcd1e1011610170578063a9914e99116100cc578063d13b9dc411610085578063d13b9dc4146108de578063d3bb6c1214610943578063d547741f14610958578063d9b1962214610978578063dc0d3dff1461098d578063dce85be9146109ad578063e64ae4bd146109c357600080fd5b8063a9914e9914610847578063bbc391281461085c578063bdfc1a2414610871578063c84d22141461089e578063cce8c26a146108b4578063cf9947fd146108c957600080fd5b806381c184d31161012957806381c184d31461076d5780638b469b8e1461078d5780638bc71516146107a257806391d14854146107c257806393e0eb03146107f2578063a217fddf14610812578063a32fa5b31461082757600080fd5b80636bcd1e10146106c857806373451f65146106d0578063741bef1a146106e35780637a8ffb3e146107175780637b7abea71461072d5780637ec55e5f1461074d57600080fd5b80633378f39e1161021f57806349900c0f116101d857806349900c0f146105da57806353167f97146105ef578063532da8e31461062257806359fe72791461064457806361172eb31461066657806367fadfd9146106865780636b4a4232146106a857600080fd5b80633378f39e14610496578063340b3da9146104b657806336568abe146105545780633e47d6f3146105745780634337b845146105a5578063447c9d2a146105c557600080fd5b80631db6d106116102715780631db6d106146103975780631f0317b4146103cd57806323559c57146103e3578063248a9ca31461042b5780632e0f2625146104585780632f2ff15d1461047457600080fd5b806309a34f00146102c457806309d39b791461030157806314bfd6d01461032157806314e00b6d1461034157806315382ab71461036057806319d3cfd41461038257600080fd5b366102bf57005b600080fd5b3480156102d057600080fd5b506102e46102df3660046128ef565b6109e3565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561030d57600080fd5b506102e461031c3660046128ef565b610a0d565b34801561032d57600080fd5b506102e461033c3660046128ef565b610a1d565b34801561034d57600080fd5b50600f545b6040519081526020016102f8565b34801561036c57600080fd5b50610352600080516020612fbf83398151915281565b34801561038e57600080fd5b50600554610352565b3480156103a357600080fd5b506102e46103b2366004612924565b6010602052600090815260409020546001600160a01b031681565b3480156103d957600080fd5b5061035260085481565b3480156103ef57600080fd5b506104166103fe366004612924565b60116020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016102f8565b34801561043757600080fd5b506103526104463660046128ef565b60009081526001602052604090205490565b34801561046457600080fd5b50610352670de0b6b3a764000081565b34801561048057600080fd5b5061049461048f36600461293f565b610a2d565b005b3480156104a257600080fd5b506102e46104b13660046128ef565b610aca565b3480156104c257600080fd5b506105166104d1366004612924565b600c6020526000908152604090208054600182015460028301546003909301546001600160a01b03928316939183169291821691811690600160a01b900461ffff1685565b604080516001600160a01b039687168152948616602086015292851692840192909252909216606082015261ffff909116608082015260a0016102f8565b34801561056057600080fd5b5061049461056f36600461293f565b610ada565b34801561058057600080fd5b5061059461058f366004612924565b610b3c565b6040516102f89594939291906129f3565b3480156105b157600080fd5b506104946105c0366004612924565b610c04565b3480156105d157600080fd5b50600a54610352565b3480156105e657600080fd5b50610494610ed9565b3480156105fb57600080fd5b5061041661060a366004612924565b600d6020526000908152604090205463ffffffff1681565b34801561062e57600080fd5b50610352600080516020612f7f83398151915281565b34801561065057600080fd5b50610352600080516020612f5f83398151915281565b34801561067257600080fd5b50610494610681366004612924565b611285565b34801561069257600080fd5b50610352600080516020612f9f83398151915281565b3480156106b457600080fd5b506102e46106c33660046128ef565b611383565b610494611393565b6104946106de366004612a54565b611546565b3480156106ef57600080fd5b506102e47f000000000000000000000000000000000000000000000000000000000000000081565b34801561072357600080fd5b5061035260075481565b34801561073957600080fd5b50610494610748366004612b05565b61177b565b34801561075957600080fd5b506102e46107683660046128ef565b611899565b34801561077957600080fd5b50610494610788366004612b37565b6118a9565b34801561079957600080fd5b506104946119f8565b3480156107ae57600080fd5b506104946107bd366004612924565b611a97565b3480156107ce57600080fd5b506107e26107dd36600461293f565b611fbf565b60405190151581526020016102f8565b3480156107fe57600080fd5b5061049461080d366004612924565b611fea565b34801561081e57600080fd5b50610352600081565b34801561083357600080fd5b506107e261084236600461293f565b6120e6565b34801561085357600080fd5b50600e54610352565b34801561086857600080fd5b50600354610352565b34801561087d57600080fd5b5061089161088c3660046128ef565b612138565b6040516102f89190612b75565b3480156108aa57600080fd5b5061035260095481565b3480156108c057600080fd5b50601954610352565b3480156108d557600080fd5b50610494612198565b3480156108ea57600080fd5b506109216108f9366004612924565b6004602052600090815260409020546001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff9091166020830152016102f8565b34801561094f57600080fd5b50600b54610352565b34801561096457600080fd5b5061049461097336600461293f565b6124b0565b34801561098457600080fd5b50600254610352565b34801561099957600080fd5b506102e46109a83660046128ef565b6124c9565b3480156109b957600080fd5b5061035260065481565b3480156109cf57600080fd5b506102e46109de3660046128ef565b6124d9565b600581815481106109f357600080fd5b6000918252602090912001546001600160a01b0316905081565b600381815481106109f357600080fd5b600281815481106109f357600080fd5b600082815260016020526040902054610a4690336124e9565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610abc5760405162461bcd60e51b815260206004820152601d60248201527f43616e206f6e6c79206772616e7420746f206e6f6e20686f6c6465727300000060448201526064015b60405180910390fd5b610ac68282612567565b5050565b600f81815481106109f357600080fd5b336001600160a01b03821614610b325760405162461bcd60e51b815260206004820152601a60248201527f43616e206f6e6c792072656e6f756e636520666f722073656c660000000000006044820152606401610ab3565b610ac682826125c0565b601860205260009081526040902080546001820180546001600160a01b039092169291610b6890612b83565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9490612b83565b8015610be15780601f10610bb657610100808354040283529160200191610be1565b820191906000526020600020905b815481529060010190602001808311610bc457829003601f168201915b50505050600283015460039093015491929160ff80821692506101009091041685565b600080516020612f9f833981519152610c1d81336124e9565b60065415610c7f5760405162461bcd60e51b815260206004820152602960248201527f50726520656c656374696f6e73206e6f742079657420636c6f736564206f72206044820152681cd8da19591d5b195960ba1b6064820152608401610ab3565b60085442118015610c91575060085415155b610cd95760405162461bcd60e51b8152602060048201526019602482015278115b1958dd1a5bdb9cc81b9bdd081e595d081cdd185c9d1959603a1b6044820152606401610ab3565b6009544210610d255760405162461bcd60e51b8152602060048201526018602482015277115b1958dd1a5bdb9cc8185b1c9958591e4818db1bdcd95960421b6044820152606401610ab3565b6001600160a01b0382163303610d4d5760405162461bcd60e51b8152600401610ab390612bbd565b6001600160a01b03821660009081526011602052604090205463ffffffff16610dd95760405162461bcd60e51b815260206004820152603860248201527f5468652070726f7669646564206163636f756e742061646472657373206e6f746044820152772062656c6f6e6720746f20616e792063616e64696461746560401b6064820152608401610ab3565b336000908152601060205260409020546001600160a01b031615610e335760405162461bcd60e51b8152602060048201526011602482015270165bdd48185b1c9958591e481d9bdd1959607a1b6044820152606401610ab3565b33600081815260106020908152604080832080546001600160a01b0388166001600160a01b03199182168117909255600f8054600181019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201805490911690951790945592825260119052908120805463ffffffff1691610eb683612c0a565b91906101000a81548163ffffffff021916908363ffffffff160217905550505050565b600080516020612f5f833981519152610ef281336124e9565b60075415610f4e5760405162461bcd60e51b815260206004820152602360248201527f50726520656c656374696f6e732068617320746f20626520636c6f73652066696044820152621c9cdd60ea1b6064820152608401610ab3565b600854600003610fb45760405162461bcd60e51b815260206004820152602b60248201527f456c656374696f6e7320616c726561647920636c6f736564206f72206e6f742060448201526a1e595d081c1b185b9b995960aa1b6064820152608401610ab3565b4260095462093a80610fc69190612c2d565b1061102c5760405162461bcd60e51b815260206004820152603060248201527f456c656374696f6e732063616e206f6e6c7920636c6f7365206166746572203760448201526f0819185e5cc81bd9881a5d1cc8195b9960821b6064820152608401610ab3565b60005b6003548110156110d357611078600080516020612f7f8339815191526003838154811061105e5761105e612c40565b6000918252602090912001546001600160a01b03166125c0565b600460006003838154811061108f5761108f612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546001600160b01b0319169055806110cb81612c56565b91505061102f565b5060408051600081526020810191829052516110f191600391612875565b50600f5460005b600e548110156111d957600082600160116000600e868154811061111e5761111e612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611153919063ffffffff16612c6f565b61115e906064612c93565b63ffffffff1661116e9190612cbb565b9050600a8111156111c6576000600a6111878184612cdd565b6111919190612cbb565b90506111c4600e84815481106111a9576111a9612c40565b6000918252602090912001546001600160a01b0316826118a9565b505b50806111d181612c56565b9150506110f8565b5060005b600e5481101561123f5760116000600e83815481106111fe576111fe612c40565b60009182526020808320909101546001600160a01b031683528201929092526040019020805463ffffffff191690558061123781612c56565b9150506111dd565b50604080516000815260208101918290525161125d91600e91612875565b50604080516000815260208101918290525161127b91600f91612875565b5050600060085550565b600080516020612f5f83398151915261129e81336124e9565b6112b6600080516020612f9f83398151915283611fbf565b156113185760405162461bcd60e51b815260206004820152602c60248201527f436974697a656e20726f6c6520746f2074686973206164647265737320616c7260448201526b1958591e4819dc985b9d195960a21b6064820152608401610ab3565b611330600080516020612f9f83398151915283612567565b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0392909216919091179055565b600a81815481106109f357600080fd5b600080516020612f9f8339815191526113ac81336124e9565b6000600654116114145760405162461bcd60e51b815260206004820152602d60248201527f50726520656c656374696f6e73206e6f74207363686564756c6564206f72206160448201526c1b1c9958591e4818db1bdcd959609a1b6064820152608401610ab3565b42600654116114715760405162461bcd60e51b8152602060048201526024808201527f50726520656c656374696f6e7320697320616c726561647920696e2070726f676044820152637265737360e01b6064820152608401610ab3565b336000908152600d602052604090205463ffffffff16156114e65760405162461bcd60e51b815260206004820152602960248201527f596f752061726520616c7265616479207265676973746572656420617320612060448201526863616e64696461746560b81b6064820152608401610ab3565b50600a805460018181019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916339081179091556000908152600d60205260409020805463ffffffff19169091179055565b6000611572347f0000000000000000000000000000000000000000000000000000000000000000612620565b6012549091508110156115c75760405162461bcd60e51b815260206004820152601b60248201527f596f75206e65656420746f207370656e64206d6f7265204554482100000000006044820152606401610ab3565b33600090815260186020526040902060030154610100900460ff1661170357601980546001810182556000919091527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950180546001600160a01b031916339081179091556040805160a0810182529182526020820184905281018290526060810161165183612138565b6005811115611662576116626129bb565b8152600160209182018190523360009081526018835260409020835181546001600160a01b0319166001600160a01b0390911617815591830151908201906116aa9082612d3f565b5060408201516002820155606082015160038201805460ff191660018360058111156116d8576116d86129bb565b021790555060809190910151600390910180549115156101000261ff00199092169190911790555050565b3360009081526018602052604081206002018054839290611725908490612c2d565b90915550503360009081526018602052604090206002015461174690612138565b336000908152601860205260409020600301805460ff19166001836005811115611772576117726129bb565b02179055505050565b600080516020612f5f83398151915261179481336124e9565b600854156117f05760405162461bcd60e51b815260206004820152602360248201527f50726576696f757320656c656374696f6e732068617320746f20626520636c6f6044820152621cd95960ea1b6064820152608401610ab3565b6117fd4262278d00612c2d565b85116118845760405162461bcd60e51b815260206004820152604a60248201527f4e65787420656c656374696f6e20737461727420646174652068617320746f2060448201527f6265206174206c65617374203330206461797320706c616e6e65642061686561606482015269642066726f6d206e6f7760b01b608482015260a401610ab3565b50600693909355600791909155600855600955565b600b81815481106109f357600080fd5b600080516020612fbf8339815191526118c281336124e9565b6118da600080516020612f7f83398151915284611fbf565b156119435760405162461bcd60e51b815260206004820152603360248201527f506f6c69746963616c206163746f7220726f6c6520746f2074686973206164646044820152721c995cdcc8185b1c99591e4819dc985b9d1959606a1b6064820152608401610ab3565b61195b600080516020612f7f83398151915284612567565b506040805180820182526001600160a01b0393841680825261ffff93841660208084019182526000838152600490915293842092518354915196166001600160b01b031990911617600160a01b9590941694909402929092179091556003805460018101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169091179055565b600080516020612f7f833981519152611a1181336124e9565b604051600090339047908381818185875af1925050503d8060008114611a53576040519150601f19603f3d011682016040523d82523d6000602084013e611a58565b606091505b5050905080610ac65760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606401610ab3565b600080516020612f9f833981519152611ab081336124e9565b336000908152600c6020908152604091829020825160a08101845281546001600160a01b03908116825260018301548116938201939093526002820154831693810193909352600301549081166060830152600160a01b900461ffff16608082015260065442118015611b24575060065415155b611b705760405162461bcd60e51b815260206004820152601d60248201527f50726520656c656374696f6e73206e6f742079657420737461727465640000006044820152606401610ab3565b6007544210611bc15760405162461bcd60e51b815260206004820152601c60248201527f50726520656c656374696f6e7320616c726561647920636c6f736564000000006044820152606401610ab3565b806080015161ffff16600303611c3a5760405162461bcd60e51b815260206004820152603860248201527f596f7520616c7265616479207573656420796f7572203320766f746520637265604482015277646974206f6e207468652070726520656c656374696f6e7360401b6064820152608401610ab3565b6001600160a01b0383166000908152600d602052604090205463ffffffff16611cdc5760405162461bcd60e51b815260206004820152604860248201527f556e646572207468652070726f7669646564206164647265737320746865726560448201527f206973206e6f20726567697374657265642070726520656c656374696f6e2063606482015267616e64696461746560c01b608482015260a401610ab3565b6001600160a01b0383163303611d045760405162461bcd60e51b8152600401610ab390612bbd565b806080015161ffff16600003611dfa57600b805460018181019092557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319908116339081179092556040805160a0810182528381526001600160a01b038881166020838101918252600084860181815260608601828152608087018b8152998352600c90935295902093518454908416908716178455905196830180549783169786169790971790965591516002820180549184169190941617909255925160039091018054925161ffff16600160a01b026001600160b01b03199093169190931617179055611f71565b826001600160a01b031681602001516001600160a01b03161480611e335750826001600160a01b031681604001516001600160a01b0316145b80611e535750826001600160a01b031681606001516001600160a01b0316145b15611ebc5760405162461bcd60e51b815260206004820152603360248201527f596f752063616e277420766f7465206f6e207468652073616d652063616e646960448201527264617465206d6f7265207468616e206f6e636560681b6064820152608401610ab3565b60408101516001600160a01b0316611efe57336000908152600c6020526040902060020180546001600160a01b0319166001600160a01b038516179055611f2a565b336000908152600c6020526040902060030180546001600160a01b0319166001600160a01b0385161790555b336000908152600c602052604090206003018054600160a01b900461ffff16906014611f5583612dff565b91906101000a81548161ffff021916908361ffff160217905550505b6001600160a01b0383166000908152600d60205260408120805463ffffffff1691611f9b83612c0a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b600080516020612fbf83398151915261200381336124e9565b61201b600080516020612f5f83398151915283611fbf565b1561207b5760405162461bcd60e51b815260206004820152602a60248201527f41646d696e20726f6c6520746f2074686973206164647265737320616c726561604482015269191e4819dc985b9d195960b21b6064820152608401610ab3565b612093600080516020612f5f83398151915283612567565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b60008281526020818152604080832083805290915281205460ff1661212f57506000828152602081815260408083206001600160a01b038516845290915290205460ff16611fe4565b50600192915050565b601754600090821061214c57506005919050565b601654821061215d57506004919050565b601554821061216e57506003919050565b601454821061217f57506002919050565b601354821061219057506001919050565b506000919050565b600080516020612f5f8339815191526121b181336124e9565b4260075462093a806121c39190612c2d565b1061222d5760405162461bcd60e51b815260206004820152603460248201527f50726520656c656374696f6e732063616e206f6e6c7920636c6f736520616674604482015273195c880dc819185e5cc81bd9881a5d1cc8195b9960621b6064820152608401610ab3565b600b54600a5460005b81811015612371576000836001600d6000600a868154811061225a5761225a612c40565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461228f919063ffffffff16612c6f565b61229a906064612c93565b63ffffffff166122aa9190612cbb565b9050601481111561235e57600e600a83815481106122ca576122ca612c40565b600091825260208083209091015483546001818101865594845291832090910180546001600160a01b0319166001600160a01b03909216919091179055600a805460119291908690811061232057612320612c40565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805463ffffffff191663ffffffff929092169190911790555b508061236981612c56565b915050612236565b5060005b818110156123d557600d6000600a838154811061239457612394612c40565b60009182526020808320909101546001600160a01b031683528201929092526040019020805463ffffffff19169055806123cd81612c56565b915050612375565b5060005b8281101561246457600c6000600b83815481106123f8576123f8612c40565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546001600160a01b0319908116825560018201805482169055600282018054909116905560030180546001600160b01b03191690558061245c81612c56565b9150506123d9565b50604080516000815260208101918290525161248291600a91612875565b5060408051600081526020810191829052516124a091600b91612875565b5050600060068190556007555050565b600082815260016020526040902054610b3290336124e9565b601981815481106109f357600080fd5b600e81815481106109f357600080fd5b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610ac657612525816001600160a01b03166014612656565b612530836020612656565b604051602001612541929190612e16565b60408051601f198184030181529082905262461bcd60e51b8252610ab391600401612e83565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6125ca82826124e9565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008061262c836127f9565b90506000670de0b6b3a76400006126438684612e96565b61264d9190612cbb565b95945050505050565b60606000612665836002612e96565b612670906002612c2d565b67ffffffffffffffff81111561268857612688612a3e565b6040519080825280601f01601f1916602001820160405280156126b2576020820181803683370190505b509050600360fc1b816000815181106126cd576126cd612c40565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126fc576126fc612c40565b60200101906001600160f81b031916908160001a9053506000612720846002612e96565b61272b906001612c2d565b90505b60018111156127a3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061275f5761275f612c40565b1a60f81b82828151811061277557612775612c40565b60200101906001600160f81b031916908160001a90535060049490941c9361279c81612ead565b905061272e565b5083156127f25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ab3565b9392505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e9190612ede565b505050915050806402540be4006127f29190612f2e565b8280548282559060005260206000209081019282156128ca579160200282015b828111156128ca57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612895565b506128d69291506128da565b5090565b5b808211156128d657600081556001016128db565b60006020828403121561290157600080fd5b5035919050565b80356001600160a01b038116811461291f57600080fd5b919050565b60006020828403121561293657600080fd5b6127f282612908565b6000806040838503121561295257600080fd5b8235915061296260208401612908565b90509250929050565b60005b8381101561298657818101518382015260200161296e565b50506000910152565b600081518084526129a781602086016020860161296b565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b600681106129ef57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038616815260a060208201819052600090612a179083018761298f565b9050846040830152612a2c60608301856129d1565b82151560808301529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215612a6657600080fd5b813567ffffffffffffffff80821115612a7e57600080fd5b818401915084601f830112612a9257600080fd5b813581811115612aa457612aa4612a3e565b604051601f8201601f19908116603f01168101908382118183101715612acc57612acc612a3e565b81604052828152876020848701011115612ae557600080fd5b826020860160208301376000928101602001929092525095945050505050565b60008060008060808587031215612b1b57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612b4a57600080fd5b612b5383612908565b9150602083013561ffff81168114612b6a57600080fd5b809150509250929050565b60208101611fe482846129d1565b600181811c90821680612b9757607f821691505b602082108103612bb757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f596f752063616e277420766f7465206f6e20796f757273656c66000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103612c2357612c23612bf4565b6001019392505050565b80820180821115611fe457611fe4612bf4565b634e487b7160e01b600052603260045260246000fd5b600060018201612c6857612c68612bf4565b5060010190565b63ffffffff828116828216039080821115612c8c57612c8c612bf4565b5092915050565b63ffffffff818116838216028082169190828114612cb357612cb3612bf4565b505092915050565b600082612cd857634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611fe457611fe4612bf4565b601f821115612d3a57600081815260208120601f850160051c81016020861015612d175750805b601f850160051c820191505b81811015612d3657828155600101612d23565b5050505b505050565b815167ffffffffffffffff811115612d5957612d59612a3e565b612d6d81612d678454612b83565b84612cf0565b602080601f831160018114612da25760008415612d8a5750858301515b600019600386901b1c1916600185901b178555612d36565b600085815260208120601f198616915b82811015612dd157888601518255948401946001909101908401612db2565b5085821015612def5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808316818103612c2357612c23612bf4565b7402832b936b4b9b9b4b7b7399d1030b1b1b7bab73a1605d1b815260008351612e4681601585016020880161296b565b7001034b99036b4b9b9b4b733903937b6329607d1b6015918401918201528351612e7781602684016020880161296b565b01602601949350505050565b6020815260006127f2602083018461298f565b8082028115828204841417611fe457611fe4612bf4565b600081612ebc57612ebc612bf4565b506000190190565b805169ffffffffffffffffffff8116811461291f57600080fd5b600080600080600060a08688031215612ef657600080fd5b612eff86612ec4565b9450602086015193506040860151925060608601519150612f2260808701612ec4565b90509295509295909350565b80820260008212600160ff1b84141615612f4a57612f4a612bf4565b8181058314821517611fe457611fe4612bf456feb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b46619f70d138cbbd87297896478196b4493d9dceaca01f5883ecbd7bee66d300348d313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9d9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9aa26469706673582212202a8db2801cbd3432113a4b1fc59d007ae00333edbe1ff3f31a741667da07a05d64736f6c63430008130033",
  "devdoc": {
    "author": "Márton Sándor Horváth, email: hmartonsandor{@}gmail.com",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.",
        "params": {
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.",
        "params": {
          "account": "Address of the account to which the role is being granted.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`.",
        "params": {
          "account": "Address of the account for which the role is being checked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "hasRoleWithSwitch(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.",
        "params": {
          "account": "Address of the account for which the role is being checked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.",
        "params": {
          "account": "Address of the account from which the role is being revoked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.",
        "params": {
          "account": "Address of the account from which the role is being revoked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      }
    },
    "title": "Balanced Voting System contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "notice": "Returns the admin role that controls the specified role."
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants a role to an account, if not previously granted."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks whether an account has a particular role."
      },
      "hasRoleWithSwitch(bytes32,address)": {
        "notice": "Checks whether an account has a particular role;                  role restrictions can be swtiched on and off."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes role from the account."
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes role from an account."
      }
    },
    "notice": "@dev",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/BVS.sol:BVS",
        "label": "_hasRole",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 64,
        "contract": "contracts/BVS.sol:BVS",
        "label": "_getRoleAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1810,
        "contract": "contracts/BVS.sol:BVS",
        "label": "admins",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1813,
        "contract": "contracts/BVS.sol:BVS",
        "label": "politicalActors",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1818,
        "contract": "contracts/BVS.sol:BVS",
        "label": "politicalActorProfiles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoliticalActorProfile)1807_storage)"
      },
      {
        "astId": 1821,
        "contract": "contracts/BVS.sol:BVS",
        "label": "citizens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 809,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionsStartDate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 811,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionsEndDate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 813,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionsStartDate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 815,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionsEndDate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 834,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionCandidates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 837,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionVoters",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 842,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionVotes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(PreElectionVoter)826_storage)"
      },
      {
        "astId": 846,
        "contract": "contracts/BVS.sol:BVS",
        "label": "preElectionCandidateScores",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 849,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionCandidates",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 852,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionVoters",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 856,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionVotes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 860,
        "contract": "contracts/BVS.sol:BVS",
        "label": "electionCandidateScores",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 1604,
        "contract": "contracts/BVS.sol:BVS",
        "label": "fundSizes",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(FundSizes)1564_storage"
      },
      {
        "astId": 1612,
        "contract": "contracts/BVS.sol:BVS",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_struct(FunderTicket)1576_storage)"
      },
      {
        "astId": 1615,
        "contract": "contracts/BVS.sol:BVS",
        "label": "funders",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(FundingSizeLevels)1551": {
        "encoding": "inplace",
        "label": "enum BVS_Funding.FundingSizeLevels",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(FunderTicket)1576_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BVS_Funding.FunderTicket)",
        "numberOfBytes": "32",
        "value": "t_struct(FunderTicket)1576_storage"
      },
      "t_mapping(t_address,t_struct(PoliticalActorProfile)1807_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BVS_Roles.PoliticalActorProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PoliticalActorProfile)1807_storage"
      },
      "t_mapping(t_address,t_struct(PreElectionVoter)826_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BVS_Elections.PreElectionVoter)",
        "numberOfBytes": "32",
        "value": "t_struct(PreElectionVoter)826_storage"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FundSizes)1564_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Funding.FundSizes",
        "members": [
          {
            "astId": 1553,
            "contract": "contracts/BVS.sol:BVS",
            "label": "small",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1555,
            "contract": "contracts/BVS.sol:BVS",
            "label": "medium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1557,
            "contract": "contracts/BVS.sol:BVS",
            "label": "large",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1559,
            "contract": "contracts/BVS.sol:BVS",
            "label": "xlarge",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1561,
            "contract": "contracts/BVS.sol:BVS",
            "label": "xxlarge",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1563,
            "contract": "contracts/BVS.sol:BVS",
            "label": "xxxlarge",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(FunderTicket)1576_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Funding.FunderTicket",
        "members": [
          {
            "astId": 1566,
            "contract": "contracts/BVS.sol:BVS",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1568,
            "contract": "contracts/BVS.sol:BVS",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1570,
            "contract": "contracts/BVS.sol:BVS",
            "label": "fundedAmountInUsd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1573,
            "contract": "contracts/BVS.sol:BVS",
            "label": "fundSizeLevel",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(FundingSizeLevels)1551"
          },
          {
            "astId": 1575,
            "contract": "contracts/BVS.sol:BVS",
            "label": "exists",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PoliticalActorProfile)1807_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Roles.PoliticalActorProfile",
        "members": [
          {
            "astId": 1804,
            "contract": "contracts/BVS.sol:BVS",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1806,
            "contract": "contracts/BVS.sol:BVS",
            "label": "votingCycleTotalCredits",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PreElectionVoter)826_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Elections.PreElectionVoter",
        "members": [
          {
            "astId": 817,
            "contract": "contracts/BVS.sol:BVS",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 819,
            "contract": "contracts/BVS.sol:BVS",
            "label": "candidate1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 821,
            "contract": "contracts/BVS.sol:BVS",
            "label": "candidate2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 823,
            "contract": "contracts/BVS.sol:BVS",
            "label": "candidate3",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 825,
            "contract": "contracts/BVS.sol:BVS",
            "label": "voteCount",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}