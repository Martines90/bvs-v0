{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMINISTRATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CITIZEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOTAL_CONTENT_READ_CHECK_ANSWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLITICAL_ACTOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUPER_ADMINISTRATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_CHECK_ASKED_NUM_OF_QUESTIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_CYCLE_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTING_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_articleKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_keccak256HashedAnswer",
          "type": "string"
        }
      ],
      "name": "addKeccak256HashedAnswerToArticle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_articleKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_keccak256HashedAnswer",
          "type": "string"
        }
      ],
      "name": "addKeccak256HashedAnswerToArticleResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_keccak256HashedAnswer",
          "type": "string"
        }
      ],
      "name": "addKeccak256HashedAnswerToVotingContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "admins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_articleKey",
          "type": "bytes32"
        }
      ],
      "name": "approveArticle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_articleKey",
          "type": "bytes32"
        }
      ],
      "name": "approveArticleResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        }
      ],
      "name": "approveVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "articleContentReadCheckAnswers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "articleContentResponseReadCheckAnswers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "articleKeys",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_articleKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_quizIpfsHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "assignToArticleContent",
          "type": "bool"
        }
      ],
      "name": "assignQuizIpfsHashToArticleOrResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_quizIpfsHash",
          "type": "string"
        }
      ],
      "name": "assignQuizIpfsHashToVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        }
      ],
      "name": "cancelMyVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "citizens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstVotingCycleStartDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountVotingQuizAnswerIndexes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminsSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCitizensSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "articleWordCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "articleIpfsHash",
          "type": "string"
        }
      ],
      "name": "getMyArticleCompletePuzzle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoliticalActorsSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotinCycleIndexesSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAdministratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantCitizenRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_votingCycleTotalCredit",
          "type": "uint16"
        }
      ],
      "name": "grantPoliticalActorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRoleWithSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "politicalActorProfiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "votingCycleTotalCredits",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "politicalActors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proConArticles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isArticleApproved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isResponseApproved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "publisher",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "articleIpfsHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isVoteOnA",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "responseStatementIpfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "articleContentCheckQuizIpfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "responseContentCheckQuizIpfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "publishArticleToVotingsCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isVoteOnA",
          "type": "bool"
        }
      ],
      "name": "publishProConArticle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_votingKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_proConArticleKey",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "publishProConArticleResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contentIpfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        }
      ],
      "name": "scheduleNewVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_firstVotingCycleStartDate",
          "type": "uint256"
        }
      ],
      "name": "setFirstVotingCycleStartDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingContentReadCheckAnswers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingCycleIndexes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votingCycleStartVoteCount",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingKeys",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "votings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contentIpfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "voteOnAScore",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "voteOnBScore",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "votingContentCheckQuizIpfsHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf606c58d84cf0adeb08c246c831d0b8935c9f594773b3cc73c06bb295a326b63",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "3528446",
    "logsBloom": "0x
    "blockHash": "0xbd5c12cb9d02a7c71bd40b324228c2f515af44b17a245fcadbbc60b09e93d0fb",
    "transactionHash": "0xf606c58d84cf0adeb08c246c831d0b8935c9f594773b3cc73c06bb295a326b63",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xf606c58d84cf0adeb08c246c831d0b8935c9f594773b3cc73c06bb295a326b63",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9a",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbd5c12cb9d02a7c71bd40b324228c2f515af44b17a245fcadbbc60b09e93d0fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xf606c58d84cf0adeb08c246c831d0b8935c9f594773b3cc73c06bb295a326b63",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b4661",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbd5c12cb9d02a7c71bd40b324228c2f515af44b17a245fcadbbc60b09e93d0fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xf606c58d84cf0adeb08c246c831d0b8935c9f594773b3cc73c06bb295a326b63",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xbd5c12cb9d02a7c71bd40b324228c2f515af44b17a245fcadbbc60b09e93d0fb"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "3528446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcba598a454159fd0d090c09d8661610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMINISTRATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CITIZEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOTAL_CONTENT_READ_CHECK_ANSWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLITICAL_ACTOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMINISTRATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_CHECK_ASKED_NUM_OF_QUESTIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_CYCLE_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_articleKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_keccak256HashedAnswer\",\"type\":\"string\"}],\"name\":\"addKeccak256HashedAnswerToArticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_articleKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_keccak256HashedAnswer\",\"type\":\"string\"}],\"name\":\"addKeccak256HashedAnswerToArticleResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_keccak256HashedAnswer\",\"type\":\"string\"}],\"name\":\"addKeccak256HashedAnswerToVotingContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_articleKey\",\"type\":\"bytes32\"}],\"name\":\"approveArticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_articleKey\",\"type\":\"bytes32\"}],\"name\":\"approveArticleResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"}],\"name\":\"approveVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"articleContentReadCheckAnswers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"articleContentResponseReadCheckAnswers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"articleKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_articleKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_quizIpfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"assignToArticleContent\",\"type\":\"bool\"}],\"name\":\"assignQuizIpfsHashToArticleOrResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_quizIpfsHash\",\"type\":\"string\"}],\"name\":\"assignQuizIpfsHashToVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"}],\"name\":\"cancelMyVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citizens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstVotingCycleStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountVotingQuizAnswerIndexes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCitizensSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"articleWordCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"articleIpfsHash\",\"type\":\"string\"}],\"name\":\"getMyArticleCompletePuzzle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoliticalActorsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotinCycleIndexesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAdministratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantCitizenRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_votingCycleTotalCredit\",\"type\":\"uint16\"}],\"name\":\"grantPoliticalActorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleWithSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"politicalActorProfiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"votingCycleTotalCredits\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"politicalActors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proConArticles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isArticleApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isResponseApproved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"articleIpfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isVoteOnA\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"responseStatementIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"articleContentCheckQuizIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"responseContentCheckQuizIpfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"publishArticleToVotingsCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isVoteOnA\",\"type\":\"bool\"}],\"name\":\"publishProConArticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_votingKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_proConArticleKey\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"publishProConArticleResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contentIpfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"scheduleNewVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstVotingCycleStartDate\",\"type\":\"uint256\"}],\"name\":\"setFirstVotingCycleStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingContentReadCheckAnswers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingCycleIndexes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingCycleStartVoteCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contentIpfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"voteOnAScore\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"voteOnBScore\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"votingContentCheckQuizIpfsHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"cancelMyVoting(bytes32)\":{\"params\":{\"_votingKey\":\"- identifies a registered voting\"}},\"getMyArticleCompletePuzzle(uint256,string)\":{\"params\":{\"articleIpfsHash\":\"This is the hash id of the article stored in an ipfs network\",\"articleWordCount\":\"This is the total number of words what the article contains\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.\",\"params\":{\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"grantRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.\",\"params\":{\"account\":\"Address of the account to which the role is being granted.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"hasRoleWithSwitch(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.\",\"params\":{\"account\":\"Address of the account for which the role is being checked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.\",\"params\":{\"account\":\"Address of the account from which the role is being revoked.\",\"role\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}}},\"title\":\"Balanced Voting System: Voting contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelMyVoting(bytes32)\":{\"notice\":\"If you cancel your voting you can't get back your voting credit\"},\"getMyArticleCompletePuzzle(uint256,string)\":{\"notice\":\"getMyArticleCompletePuzzle generates a series of indexes marking the position of a word in the article At article complete process Voter has to pick the first and last letter or these words from the article marked by this information. This is a unique way to prove if voter read an article as nobody can copy, re use this answer\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Returns the admin role that controls the specified role.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account, if not previously granted.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role.\"},\"hasRoleWithSwitch(bytes32,address)\":{\"notice\":\"Checks whether an account has a particular role;                  role restrictions can be swtiched on and off.\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes role from the account.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes role from an account.\"}},\"notice\":\"@dev\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BVS_Voting.sol\":\"BVS_Voting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@thirdweb-dev/contracts/extension/Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IPermissions.sol\\\";\\nimport \\\"../lib/Strings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\ncontract Permissions is IPermissions {\\n    /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n    mapping(bytes32 => mapping(address => bool)) private _hasRole;\\n\\n    /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n    mapping(bytes32 => bytes32) private _getRoleAdmin;\\n\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        if (!_hasRole[role][address(0)]) {\\n            return _hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        return _getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        if (_hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (msg.sender != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin[role];\\n        _getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _hasRole[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        _checkRole(role, account);\\n        delete _hasRole[role][account];\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d0e92086fc4427a5f041525a40499c4eb6d9dc6a5eb8c8358275527ef3ce383\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xc0cd1f87bac474a06f85e2b341b9b57662aee957fc24180d42c872481c2f2ae3\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {\\n\\n            } iszero(eq(raw, end)) {\\n\\n            } {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568\",\"license\":\"Apache-2.0\"},\"contracts/BVS_Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Balanced Voting System:Roles - contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS_Roles is Permissions {\\n    bytes32 public constant SUPER_ADMINISTRATOR =\\n        keccak256(\\\"SUPER_ADMINISTRATOR\\\");\\n    bytes32 public constant ADMINISTRATOR = keccak256(\\\"ADMINISTRATOR\\\");\\n    bytes32 public constant POLITICAL_ACTOR = keccak256(\\\"POLITICAL_ACTOR\\\");\\n    bytes32 public constant CITIZEN = keccak256(\\\"CITIZEN\\\");\\n\\n    struct PoliticalActorProfile {\\n        address account;\\n        uint16 votingCycleTotalCredits;\\n    }\\n\\n    address[] public admins;\\n    address[] public politicalActors;\\n    mapping(address => PoliticalActorProfile) public politicalActorProfiles;\\n    address[] public citizens;\\n\\n    constructor() {\\n        admins.push(msg.sender);\\n        citizens.push(msg.sender);\\n\\n        _setupRole(SUPER_ADMINISTRATOR, msg.sender);\\n        _setupRole(ADMINISTRATOR, msg.sender);\\n        _setupRole(CITIZEN, msg.sender);\\n    }\\n\\n    function grantPoliticalActorRole(\\n        address account,\\n        uint16 _votingCycleTotalCredit\\n    ) public onlyRole(SUPER_ADMINISTRATOR) {\\n        require(\\n            !hasRole(POLITICAL_ACTOR, account),\\n            \\\"Political actor role alredy granted\\\"\\n        );\\n        _setupRole(POLITICAL_ACTOR, account);\\n        politicalActorProfiles[account] = PoliticalActorProfile(\\n            account,\\n            _votingCycleTotalCredit\\n        );\\n        politicalActors.push(account);\\n    }\\n\\n    function grantAdministratorRole(\\n        address account\\n    ) public onlyRole(SUPER_ADMINISTRATOR) {\\n        require(\\n            !hasRole(ADMINISTRATOR, account),\\n            \\\"Admin role already granted\\\"\\n        );\\n        _setupRole(ADMINISTRATOR, account);\\n        admins.push(account);\\n    }\\n\\n    function grantCitizenRole(address account) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            !hasRole(CITIZEN, account),\\n            \\\"Citizen role already granted\\\"\\n        );\\n        _setupRole(CITIZEN, account);\\n        citizens.push(account);\\n    }\\n\\n    function getAdminsSize() public view returns (uint256) {\\n        return admins.length;\\n    }\\n\\n    function getCitizensSize() public view returns (uint256) {\\n        return citizens.length;\\n    }\\n\\n    function getPoliticalActorsSize() public view returns (uint256) {\\n        return politicalActors.length;\\n    }\\n}\\n\",\"keccak256\":\"0x85e22fbeed1a4ed74e259bd48104393ecbf683ee7adcc7f8f15a7678945207e8\",\"license\":\"MIT\"},\"contracts/BVS_Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// pragma\\npragma solidity ^0.8.9;\\n\\n// imports\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\n\\nimport \\\"./BVS_Roles.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Balanced Voting System: Voting contract\\n * @author M\\u00e1rton S\\u00e1ndor Horv\\u00e1th, email: hmartonsandor{@}gmail.com\\n * @notice\\n * @dev\\n */\\n\\ncontract BVS_Voting is BVS_Roles {\\n    uint256 public firstVotingCycleStartDate;\\n    uint256 public constant VOTING_CYCLE_INTERVAL = 30 days;\\n    uint256 public constant VOTING_DURATION = 14 days;\\n\\n    uint16 public constant MIN_TOTAL_CONTENT_READ_CHECK_ANSWER = 10;\\n    uint16 public constant VOTING_CHECK_ASKED_NUM_OF_QUESTIONS = 5;\\n    uint16 public constant ARTICLE_CHECK_ASKED_NUM_OF_QUESTIONS = 5;\\n    uint16 public constant ARTICLE_RESPONSE_CHECK_ASKED_NUM_OF_QUESTIONS = 5;\\n\\n    struct ProConArticle {\\n        bytes32 votingKey;\\n        bool isArticleApproved; // admin approves\\n        bool isResponseApproved; // admin approves\\n        address publisher;\\n        string articleIpfsHash;\\n        bool isVoteOnA;\\n        string responseStatementIpfsHash; // addeed by the creator of the related voting\\n        string articleContentCheckQuizIpfsHash; // added by admin\\n        string responseContentCheckQuizIpfsHash; // added by admin\\n    }\\n\\n    struct Voting {\\n        bool approved;\\n        bool cancelled;\\n        bytes32 key;\\n        address creator;\\n        string contentIpfsHash;\\n        uint256 startDate; // 10 days before start date critics can appear\\n        uint64 voteOnAScore;\\n        uint64 voteOnBScore;\\n        string votingContentCheckQuizIpfsHash;\\n    }\\n\\n    struct Vote {\\n        address account;\\n        bool approved;\\n        bytes32 votingId;\\n        mapping(bytes32 => string) proofOfArticleAndResponseRead;\\n        string proofOfVotingRead;\\n    }\\n\\n    // article content check answers\\n    mapping(bytes32 => string[]) public articleContentReadCheckAnswers; // article key => answers\\n\\n    mapping(bytes32 => string[]) public articleContentResponseReadCheckAnswers; // article key => answers\\n\\n    mapping(bytes32 => string[]) public votingContentReadCheckAnswers; // voting key => answers\\n\\n    // track the number of votes political actors created during voting cycles\\n    mapping(uint16 => mapping(address => uint16))\\n        public votingCycleStartVoteCount;\\n\\n    // track the number of articles published related to scheduled votings\\n    mapping(address => mapping(bytes32 => uint16)) // political_actor =>  voting key => published articles count\\n        public publishArticleToVotingsCount;\\n\\n    // register the voting cycle indexes in order to clear votingCycleStartVoteCount data\\n    uint16[] public votingCycleIndexes;\\n\\n    // store votings\\n    mapping(bytes32 => Voting) public votings;\\n\\n    // store pro/con articles\\n    mapping(bytes32 => mapping(bytes32 => ProConArticle)) public proConArticles; // voting key => article key => article\\n\\n    // register voting and article keys\\n    bytes32[] public votingKeys;\\n    bytes32[] public articleKeys;\\n\\n    constructor() BVS_Roles() {}\\n\\n    function setFirstVotingCycleStartDate(\\n        uint256 _firstVotingCycleStartDate\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            _firstVotingCycleStartDate > block.timestamp,\\n            \\\"Voting cycle start date has to be in the future\\\"\\n        );\\n        firstVotingCycleStartDate = _firstVotingCycleStartDate;\\n\\n        // reset votingCycleStartVoteCount;\\n        for (uint16 i = 0; i < votingCycleIndexes.length; i++) {\\n            for (uint u = 0; u < politicalActors.length; u++) {\\n                delete votingCycleStartVoteCount[votingCycleIndexes[i]][\\n                    politicalActors[u]\\n                ];\\n            }\\n        }\\n\\n        votingCycleIndexes = new uint16[](0);\\n    }\\n\\n    function scheduleNewVoting(\\n        string calldata _contentIpfsHash,\\n        uint256 _startDate\\n    ) public onlyRole(POLITICAL_ACTOR) {\\n        require(\\n            firstVotingCycleStartDate < block.timestamp &&\\n                firstVotingCycleStartDate != 0,\\n            \\\"Start new voting period is not yet active\\\"\\n        );\\n        require(\\n            _startDate > block.timestamp + 10 days,\\n            \\\"New voting has to be scheduled 10 days later from now\\\"\\n        );\\n        require(\\n            _startDate < block.timestamp + VOTING_CYCLE_INTERVAL,\\n            \\\"New voting start date can only be scheduled within 30 days ahead\\\"\\n        );\\n        uint256 timePassed = block.timestamp - firstVotingCycleStartDate;\\n        uint16 votingCycleCount = uint16(timePassed / VOTING_CYCLE_INTERVAL);\\n\\n        require(\\n            timePassed - votingCycleCount * VOTING_CYCLE_INTERVAL <\\n                VOTING_CYCLE_INTERVAL - 10 days,\\n            \\\"You can't start new voting 10 days or less before the ongoing voting cycle ends\\\"\\n        );\\n        require(\\n            politicalActorProfiles[msg.sender].votingCycleTotalCredits >\\n                votingCycleStartVoteCount[votingCycleCount][msg.sender],\\n            \\\"You ran out of start new voting credits in this voting cycle\\\"\\n        );\\n\\n        votingCycleStartVoteCount[votingCycleCount][msg.sender]++;\\n\\n        bytes32 _votingKey = keccak256(\\n            abi.encodePacked(\\n                Strings.toString(block.timestamp),\\n                msg.sender,\\n                _contentIpfsHash\\n            )\\n        );\\n\\n        votings[_votingKey].key = _votingKey;\\n        votings[_votingKey].creator = msg.sender;\\n        votings[_votingKey].contentIpfsHash = _contentIpfsHash;\\n        votings[_votingKey].startDate = _startDate;\\n        votings[_votingKey].voteOnAScore = 0;\\n        votings[_votingKey].voteOnBScore = 0;\\n\\n        bool votingCycleIndexAlreadyAdded = false;\\n        for (uint16 i = 0; i < votingCycleIndexes.length; i++) {\\n            if (votingCycleCount == votingCycleIndexes[i]) {\\n                votingCycleIndexAlreadyAdded = true;\\n                break;\\n            }\\n        }\\n\\n        if (!votingCycleIndexAlreadyAdded) {\\n            votingCycleIndexes.push(votingCycleCount);\\n        }\\n\\n        votingKeys.push(_votingKey);\\n    }\\n\\n    /**\\n     * If you cancel your voting you can't get back your voting credit\\n     * @param _votingKey - identifies a registered voting\\n     */\\n    function cancelMyVoting(\\n        bytes32 _votingKey\\n    ) public onlyRole(POLITICAL_ACTOR) {\\n        require(\\n            votings[_votingKey].creator == msg.sender,\\n            \\\"Only the creator of the voting is allowed to cancel it\\\"\\n        );\\n        require(\\n            votings[_votingKey].startDate > block.timestamp,\\n            \\\"Voting already started\\\"\\n        );\\n        votings[_votingKey].cancelled = true;\\n    }\\n\\n    function assignQuizIpfsHashToVoting(\\n        bytes32 _votingKey,\\n        string memory _quizIpfsHash\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(votings[_votingKey].creator != address(0), \\\"Voting not exists\\\");\\n        votings[_votingKey].votingContentCheckQuizIpfsHash = _quizIpfsHash;\\n    }\\n\\n    function addKeccak256HashedAnswerToVotingContent(\\n        bytes32 _votingKey,\\n        string memory _keccak256HashedAnswer\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            keccak256(\\n                bytes(votings[_votingKey].votingContentCheckQuizIpfsHash)\\n            ) != keccak256(bytes(\\\"\\\")),\\n            \\\"No voting content check quiz ipfs assigned yet\\\"\\n        );\\n\\n        votingContentReadCheckAnswers[_votingKey].push(_keccak256HashedAnswer);\\n    }\\n\\n    function approveVoting(bytes32 _votingKey) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            votings[_votingKey].startDate > block.timestamp,\\n            \\\"Voting already started\\\"\\n        );\\n        require(\\n            votings[_votingKey].startDate - 3 days < block.timestamp,\\n            \\\"Voting can only be approved 3 days or less before it's start\\\"\\n        );\\n        require(\\n            votingContentReadCheckAnswers[_votingKey].length >=\\n                MIN_TOTAL_CONTENT_READ_CHECK_ANSWER,\\n            \\\"No enough content read quiz answer added\\\"\\n        );\\n        // make sure the creator of the voting responded for all the ciritcal articles\\n        bool isRespondedAllTheCritics = true;\\n        uint256 articleKeysLength = articleKeys.length;\\n\\n        for (uint i = 0; i < articleKeysLength; i++) {\\n            if (proConArticles[_votingKey][articleKeys[i]].isArticleApproved) {\\n                if (\\n                    !proConArticles[_votingKey][articleKeys[i]]\\n                        .isResponseApproved\\n                ) {\\n                    isRespondedAllTheCritics = false;\\n                    break;\\n                }\\n            }\\n        }\\n        require(\\n            isRespondedAllTheCritics,\\n            \\\"Creator of the voting not yet responded on all the critics\\\"\\n        );\\n        votings[_votingKey].approved = true;\\n    }\\n\\n    function publishProConArticle(\\n        bytes32 _votingKey,\\n        string memory _ipfsHash,\\n        bool _isVoteOnA\\n    ) public onlyRole(POLITICAL_ACTOR) {\\n        require(\\n            publishArticleToVotingsCount[msg.sender][_votingKey] <\\n                politicalActorProfiles[msg.sender].votingCycleTotalCredits,\\n            \\\"You don't have more credit (related to this voting) to publish\\\"\\n        );\\n\\n        bytes32 articleKey = keccak256(\\n            abi.encodePacked(\\n                Strings.toString(block.timestamp),\\n                msg.sender,\\n                _ipfsHash\\n            )\\n        );\\n\\n        proConArticles[_votingKey][articleKey] = ProConArticle(\\n            _votingKey,\\n            false,\\n            false,\\n            msg.sender,\\n            _ipfsHash,\\n            _isVoteOnA,\\n            \\\"\\\",\\n            \\\"\\\",\\n            \\\"\\\"\\n        );\\n        articleKeys.push(articleKey);\\n        publishArticleToVotingsCount[msg.sender][_votingKey]++;\\n    }\\n\\n    function assignQuizIpfsHashToArticleOrResponse(\\n        bytes32 _votingKey,\\n        bytes32 _articleKey,\\n        string memory _quizIpfsHash,\\n        bool assignToArticleContent\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            proConArticles[_votingKey][_articleKey].publisher != address(0),\\n            \\\"Article not exists\\\"\\n        );\\n        if (assignToArticleContent) {\\n            proConArticles[_votingKey][_articleKey]\\n                .articleContentCheckQuizIpfsHash = _quizIpfsHash;\\n        } else {\\n            proConArticles[_votingKey][_articleKey]\\n                .responseContentCheckQuizIpfsHash = _quizIpfsHash;\\n        }\\n    }\\n\\n    function addKeccak256HashedAnswerToArticle(\\n        bytes32 _votingKey,\\n        bytes32 _articleKey,\\n        string memory _keccak256HashedAnswer\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            keccak256(\\n                bytes(\\n                    proConArticles[_votingKey][_articleKey]\\n                        .articleContentCheckQuizIpfsHash\\n                )\\n            ) != keccak256(bytes(\\\"\\\")),\\n            \\\"Article content check ipfs not assigned yet\\\"\\n        );\\n        articleContentReadCheckAnswers[_articleKey].push(\\n            _keccak256HashedAnswer\\n        );\\n    }\\n\\n    function approveArticle(\\n        bytes32 _votingKey,\\n        bytes32 _articleKey\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            votings[_votingKey].startDate > block.timestamp,\\n            \\\"Voting already started\\\"\\n        );\\n        require(\\n            proConArticles[_votingKey][_articleKey].publisher != address(0),\\n            \\\"Article not exists\\\"\\n        );\\n        require(\\n            articleContentReadCheckAnswers[_articleKey].length >=\\n                MIN_TOTAL_CONTENT_READ_CHECK_ANSWER,\\n            \\\"No enough content read check answers added\\\"\\n        );\\n        proConArticles[_votingKey][_articleKey].isArticleApproved = true;\\n    }\\n\\n    function publishProConArticleResponse(\\n        bytes32 _votingKey,\\n        bytes32 _proConArticleKey,\\n        string memory _ipfsHash\\n    ) public onlyRole(POLITICAL_ACTOR) {\\n        require(\\n            votings[_votingKey].startDate > block.timestamp,\\n            \\\"Voting already started\\\"\\n        );\\n\\n        require(\\n            votings[proConArticles[_votingKey][_proConArticleKey].votingKey]\\n                .creator == msg.sender,\\n            \\\"This article not related to your voting\\\"\\n        );\\n\\n        proConArticles[_votingKey][_proConArticleKey]\\n            .responseStatementIpfsHash = _ipfsHash;\\n    }\\n\\n    function addKeccak256HashedAnswerToArticleResponse(\\n        bytes32 _votingKey,\\n        bytes32 _articleKey,\\n        string memory _keccak256HashedAnswer\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            keccak256(\\n                bytes(\\n                    proConArticles[_votingKey][_articleKey]\\n                        .responseContentCheckQuizIpfsHash\\n                )\\n            ) != keccak256(bytes(\\\"\\\")),\\n            \\\"Content check ipfs not assigned\\\"\\n        );\\n\\n        articleContentResponseReadCheckAnswers[_articleKey].push(\\n            _keccak256HashedAnswer\\n        );\\n    }\\n\\n    function approveArticleResponse(\\n        bytes32 _votingKey,\\n        bytes32 _articleKey\\n    ) public onlyRole(ADMINISTRATOR) {\\n        require(\\n            votings[_votingKey].startDate > block.timestamp,\\n            \\\"Voting already started\\\"\\n        );\\n        require(\\n            proConArticles[_votingKey][_articleKey].publisher != address(0),\\n            \\\"Article not exists\\\"\\n        );\\n        require(\\n            keccak256(\\n                bytes(\\n                    proConArticles[_votingKey][_articleKey]\\n                        .responseStatementIpfsHash\\n                )\\n            ) != keccak256(bytes(\\\"\\\")),\\n            \\\"No response added yet\\\"\\n        );\\n        require(\\n            articleContentResponseReadCheckAnswers[_articleKey].length >=\\n                MIN_TOTAL_CONTENT_READ_CHECK_ANSWER,\\n            \\\"No enough content check answers\\\"\\n        );\\n        proConArticles[_votingKey][_articleKey].isResponseApproved = true;\\n    }\\n\\n    /**\\n     * getMyArticleCompletePuzzle generates a series of indexes marking the position of a word in the article\\n     * At article complete process Voter has to pick the first and last letter or these words from the article marked by this information.\\n     * This is a unique way to prove if voter read an article as nobody can copy, re use this answer\\n     * @param articleWordCount This is the total number of words what the article contains\\n     * @param articleIpfsHash This is the hash id of the article stored in an ipfs network\\n     */\\n\\n    function getMyArticleCompletePuzzle(\\n        uint256 articleWordCount,\\n        string memory articleIpfsHash\\n    ) public view returns (string memory) {\\n        string memory puzzle;\\n\\n        bytes32 hashCode = keccak256(\\n            abi.encodePacked(articleIpfsHash, msg.sender, articleWordCount)\\n        );\\n\\n        uint256 total = 1;\\n        for (uint i = 0; i < hashCode.length; i++) {\\n            uint8 item = uint8(hashCode[i]);\\n            if (i % 2 == 0) {\\n                total *= item;\\n            } else {\\n                total += item;\\n            }\\n\\n            if ((i + 1) % 4 == 0) {\\n                uint256 wordIndex = (total % articleWordCount) + 1;\\n                puzzle = string.concat(\\n                    puzzle,\\n                    \\\"|\\\",\\n                    Strings.toString(wordIndex)\\n                );\\n                total = 1;\\n            }\\n        }\\n\\n        return puzzle;\\n    }\\n\\n    function getAccountVotingQuizAnswerIndexes(\\n        bytes32 _votingKey,\\n        address _account\\n    ) public view returns (uint8[] memory) {\\n        bytes32 hashCode = keccak256(\\n            abi.encodePacked(\\n                votings[_votingKey].votingContentCheckQuizIpfsHash,\\n                votings[_votingKey].contentIpfsHash,\\n                _account\\n            )\\n        );\\n\\n        uint8 numOfVotingQuizQuestions = uint8(\\n            votingContentReadCheckAnswers[_votingKey].length\\n        );\\n\\n        uint8[] memory questionsToAsk = new uint8[](\\n            VOTING_CHECK_ASKED_NUM_OF_QUESTIONS\\n        );\\n\\n        uint8 countAddedQuestions = 0;\\n        for (\\n            uint8 i = uint8(\\n                votings[_votingKey].startDate % numOfVotingQuizQuestions\\n            );\\n            countAddedQuestions < VOTING_CHECK_ASKED_NUM_OF_QUESTIONS;\\n            i++\\n        ) {\\n            console.log(\\\"uint8(hashCode[i]):\\\", uint8(hashCode[i]));\\n            uint8 questionNth = (uint8(hashCode[i]) % numOfVotingQuizQuestions);\\n\\n            uint8 u = 0;\\n            do {\\n                if (questionsToAsk[u] == questionNth) {\\n                    questionNth++;\\n                    u = 0;\\n                    if (questionNth > numOfVotingQuizQuestions) {\\n                        questionNth = 1;\\n                    }\\n                } else {\\n                    u++;\\n                }\\n            } while (u < countAddedQuestions);\\n\\n            questionsToAsk[countAddedQuestions] = questionNth;\\n            countAddedQuestions++;\\n        }\\n\\n        return questionsToAsk;\\n    }\\n\\n    function getVotinCycleIndexesSize() public view returns (uint256) {\\n        return votingCycleIndexes.length;\\n    }\\n\\n    function vote() public {}\\n}\\n\",\"keccak256\":\"0xd252a6353b5d7f12061f863d185e35ef305bc9ce7430fafe8409c79bc6833de2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054336001600160a01b031991821681179092556005805493840181556000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090920180549092168117909155620000bb907fd9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9a9062000119565b620000e77fb346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b46613362000119565b620001137f313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c93362000119565b62000172565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b613bd480620001826000396000f3fe608060405234801561001057600080fd5b50600436106102ed5760003560e01c8063632a9a5211610193578063b128744c116100e4578063d547741f11610092578063d547741f1461072e578063d9b1962214610741578063e3ab974614610749578063e8bcf1dd14610752578063f8785b4f1461035d578063fbd7082714610765578063fc3978211461077857600080fd5b8063b128744c14610678578063b1a03aed1461068b578063bbc391281461069e578063bcc36be7146106a6578063c6746e59146106b9578063cad1043b146106cc578063d13b9dc4146106d657600080fd5b80639451fcc8116101415780639451fcc8146105fd578063a1f8316514610610578063a217fddf14610638578063a32fa5b314610640578063a438d20814610653578063a880aa311461065d578063b0f8b42a1461066557600080fd5b8063632a9a521461030557806367fadfd91461055d578063796e4dec1461057257806381c184d3146105a15780638ce38851146105b457806391d14854146105c757806393e0eb03146105ea57600080fd5b80632f2ff15d1161024d578063466dff58116101fb578063466dff581461035d5780634c3cc1bc146104cb578063532da8e3146104fa57806359fe72791461050f5780635d3d05f3146105245780635ea967001461053757806361172eb31461054a57600080fd5b80632f2ff15d146104225780632f3ddb8f146104355780632fa0bb951461043d5780633224caf91461045d57806336568abe1461048557806337e3f71c146104985780633f691cb3146104b857600080fd5b806319a8fb1c116102aa57806319a8fb1c1461039b57806319d3cfd4146103ae57806321c7c7e7146103b6578063248a9ca3146103c95780632ab52eca146103e95780632bad9a92146103fc5780632f2deba31461040f57600080fd5b806307eca8ab146102f257806309a34f001461030757806309d39b791461033757806314bfd6d01461034a57806314e55bd01461035d57806315382ab714610378575b600080fd5b610305610300366004612fb8565b61078b565b005b61031a61031536600461302f565b610c89565b6040516001600160a01b0390911681526020015b60405180910390f35b61031a61034536600461302f565b610cb3565b61031a61035836600461302f565b610cc3565b610365600581565b60405161ffff909116815260200161032e565b61038d600080516020613b5f83398151915281565b60405190815260200161032e565b61038d6103a936600461302f565b610cd3565b60055461038d565b6103056103c43660046130ea565b610cf4565b61038d6103d736600461302f565b60009081526001602052604090205490565b6103056103f7366004613130565b610de3565b61030561040a36600461302f565b610ef4565b61030561041d366004613194565b611204565b61030561043036600461320b565b6112c5565b600c5461038d565b61045061044b36600461320b565b61135d565b60405161032e9190613237565b61047061046b36600461302f565b61153d565b60405161032e999897969594939291906132ce565b61030561049336600461320b565b6116b9565b6104ab6104a636600461334d565b61171b565b60405161032e919061336f565b6103056104c6366004613130565b6117d4565b6103656104d9366004613382565b600b60209081526000928352604080842090915290825290205461ffff1681565b61038d600080516020613b1f83398151915281565b61038d600080516020613aff83398151915281565b61030561053236600461302f565b6118f2565b610305610545366004613130565b611a74565b6103056105583660046133ac565b611b6f565b61038d600080516020613b3f83398151915281565b6103656105803660046133d9565b600a60209081526000928352604080842090915290825290205461ffff1681565b6103056105af366004613403565b611c6d565b6103656105c236600461302f565b611dbc565b6105da6105d536600461320b565b611df4565b604051901515815260200161032e565b6103056105f83660046133ac565b611e1d565b61030561060b36600461302f565b611f19565b61062361061e36600461334d565b612046565b60405161032e9998979695949392919061342d565b61038d600081565b6105da61064e36600461320b565b612250565b61038d6212750081565b610365600a81565b6104ab61067336600461334d565b6122a2565b6104ab61068636600461334d565b6122be565b61038d61069936600461302f565b6122da565b60035461038d565b6103056106b43660046130ea565b6122ea565b6103056106c736600461334d565b612379565b61038d62278d0081565b61070c6106e43660046133ac565b6004602052600090815260409020546001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff90911660208301520161032e565b61030561073c36600461320b565b6124cb565b60025461038d565b61038d60065481565b61030561076036600461334d565b6124e4565b6103056107733660046134ad565b6126ea565b6104ab6107863660046130ea565b612991565b600080516020613b1f8339815191526107a48133612aa7565b426006541080156107b6575060065415155b6108195760405162461bcd60e51b815260206004820152602960248201527f5374617274206e657720766f74696e6720706572696f64206973206e6f74207960448201526865742061637469766560b81b60648201526084015b60405180910390fd5b61082642620d2f00613519565b82116108925760405162461bcd60e51b815260206004820152603560248201527f4e657720766f74696e672068617320746f206265207363686564756c65642031604482015274302064617973206c617465722066726f6d206e6f7760581b6064820152608401610810565b61089f62278d0042613519565b8210610915576040805162461bcd60e51b81526020600482015260248101919091527f4e657720766f74696e6720737461727420646174652063616e206f6e6c79206260448201527f65207363686564756c65642077697468696e20333020646179732061686561646064820152608401610810565b600060065442610925919061352c565b9050600061093662278d0083613555565b9050610948620d2f0062278d0061352c565b61095962278d0061ffff8416613569565b610963908461352c565b106109ee5760405162461bcd60e51b815260206004820152604f60248201527f596f752063616e2774207374617274206e657720766f74696e6720313020646160448201527f7973206f72206c657373206265666f726520746865206f6e676f696e6720766f60648201526e74696e67206379636c6520656e647360881b608482015260a401610810565b61ffff8082166000908152600a60209081526040808320338452825280832054600490925290912054908216600160a01b90910490911611610a985760405162461bcd60e51b815260206004820152603c60248201527f596f752072616e206f7574206f66207374617274206e657720766f74696e672060448201527f6372656469747320696e207468697320766f74696e67206379636c65000000006064820152608401610810565b61ffff8082166000908152600a60209081526040808320338452909152812080549092169190610ac783613580565b91906101000a81548161ffff021916908361ffff160217905550506000610aed42612b25565b338888604051602001610b0394939291906135a1565b60408051601f1981840301815291815281516020928301206000818152600d9093529120600181018290556002810180546001600160a01b03191633179055909150600301610b53878983613678565b506000818152600d602052604081206004810187905560050180546001600160801b0319169055805b600c5461ffff82161015610bee57600c8161ffff1681548110610ba157610ba1613731565b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff168461ffff1603610bdc5760019150610bee565b80610be681613580565b915050610b7c565b5080610c4d57600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c760108204018054600f9092166002026101000a61ffff81810219909316928616029190911790555b50600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020155505050505050565b60058181548110610c9957600080fd5b6000918252602090912001546001600160a01b0316905081565b60038181548110610c9957600080fd5b60028181548110610c9957600080fd5b60108181548110610ce357600080fd5b600091825260209091200154905081565b600080516020613aff833981519152610d0d8133612aa7565b6040805160208082018352600091829052858252600d90528190209051600080516020613adf83398151915291610d49916006909101906137ba565b604051809103902003610db55760405162461bcd60e51b815260206004820152602e60248201527f4e6f20766f74696e6720636f6e74656e7420636865636b207175697a2069706660448201526d1cc8185cdcda59db9959081e595d60921b6064820152608401610810565b600083815260096020908152604082208054600181018255908352912001610ddd83826137c6565b50505050565b600080516020613aff833981519152610dfc8133612aa7565b6040805160208082018352600091829052868252600e815282822086835290528190209051600080516020613adf83398151915291610e40916006909101906137ba565b604051809103902003610ec55760405162461bcd60e51b815260206004820152604160248201527f46697273742061727469636c6520726573706f6e736520636f6e74656e74206360448201527f6865636b206970667320686173682068617320746f2062652061737369676e656064820152601960fa1b608482015260a401610810565b600083815260086020908152604082208054600181018255908352912001610eed83826137c6565b5050505050565b600080516020613aff833981519152610f0d8133612aa7565b6000828152600d60205260409020600401544210610f885760405162461bcd60e51b815260206004820152603260248201527f566f74696e672063616e206f6e6c7920626520617070726f766564206265666f60448201527172652069742773207374617274206461746560701b6064820152608401610810565b6000828152600d60205260409020600401544290610faa906203f4809061352c565b1061101d5760405162461bcd60e51b815260206004820152603c60248201527f566f74696e672063616e206f6e6c7920626520617070726f766564203320646160448201527f7973206f72206c657373206265666f72652069742773207374617274000000006064820152608401610810565b600082815260096020526040902054600a11156110a75760405162461bcd60e51b815260206004820152604e6024820152600080516020613b7f83398151915260448201527f696d756d206e756d626572206f6620636f6e74656e742072656164206368656360648201526d6b207175697a20616e737765727360901b608482015260a401610810565b60105460019060005b81811015611172576000858152600e6020526040812060108054919291849081106110dd576110dd613731565b6000918252602080832090910154835282019290925260400190206001015460ff1615611160576000858152600e60205260408120601080549192918490811061112957611129613731565b9060005260206000200154815260200190815260200160002060010160019054906101000a900460ff166111605760009250611172565b8061116a8161387f565b9150506110b0565b50816111e65760405162461bcd60e51b815260206004820152603a60248201527f43726561746f72206f662074686520766f74696e67206e6f742079657420726560448201527f73706f6e646564206f6e20616c6c2074686520637269746963730000000000006064820152608401610810565b5050506000908152600d60205260409020805460ff19166001179055565b600080516020613aff83398151915261121d8133612aa7565b6000858152600e602090815260408083208784529091529020600101546201000090046001600160a01b03166112655760405162461bcd60e51b815260040161081090613898565b8115611297576000858152600e60209081526040808320878452909152902060050161129184826137c6565b50610eed565b6000858152600e6020908152604080832087845290915290206006016112bd84826137c6565b505050505050565b6000828152600160205260409020546112de9033612aa7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561134f5760405162461bcd60e51b815260206004820152601d60248201527f43616e206f6e6c79206772616e7420746f206e6f6e20686f6c646572730000006044820152606401610810565b6113598282612c2d565b5050565b6000828152600d6020908152604080832090516060939261138b9260068101926003909101918791016138c4565b60408051601f19818403018152828252805160209182012060008881526009835283812054600580875260c08701909552919550909390929091820160a0803683375050506000878152600d60205260408120600401549192509081906113f69060ff8616906138f6565b90505b600560ff8316101561152f5761144f604051806040016040528060138152602001723ab4b73a1c143430b9b421b7b232adb4ae949d60691b815250868360ff166020811061144957611449613731565b1a612c86565b600084868360ff166020811061146757611467613731565b6114739291901a61390a565b905060005b8160ff16858260ff168151811061149157611491613731565b602002602001015160ff16036114ca57816114ab8161392c565b925050600090508560ff168260ff1611156114c557600191505b6114d8565b806114d48161392c565b9150505b8360ff168160ff16106114785781858560ff16815181106114fb576114fb613731565b60ff90921660209283029190910190910152836115178161392c565b945050505080806115279061392c565b9150506113f9565b509093505050505b92915050565b600d60205260009081526040902080546001820154600283015460038401805460ff8086169661010090960416946001600160a01b03909316929190611582906135e3565b80601f01602080910402602001604051908101604052809291908181526020018280546115ae906135e3565b80156115fb5780601f106115d0576101008083540402835291602001916115fb565b820191906000526020600020905b8154815290600101906020018083116115de57829003601f168201915b50505060048401546005850154600686018054959692956001600160401b038084169650600160401b909304909216935090611636906135e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611662906135e3565b80156116af5780601f10611684576101008083540402835291602001916116af565b820191906000526020600020905b81548152906001019060200180831161169257829003601f168201915b5050505050905089565b336001600160a01b038216146117115760405162461bcd60e51b815260206004820152601a60248201527f43616e206f6e6c792072656e6f756e636520666f722073656c660000000000006044820152606401610810565b6113598282612ccb565b6009602052816000526040600020818154811061173757600080fd5b90600052602060002001600091509150508054611753906135e3565b80601f016020809104026020016040519081016040528092919081815260200182805461177f906135e3565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b505050505081565b600080516020613b1f8339815191526117ed8133612aa7565b6000848152600d6020526040902060040154421061181d5760405162461bcd60e51b81526004016108109061394b565b6000848152600e602090815260408083208684528252808320548352600d9091529020600201546001600160a01b031633146118cc5760405162461bcd60e51b815260206004820152604260248201527f596f752063616e20726573706f6e64206f6e6c792061727469636c657320776860448201527f6174206172652072656c6174656420746f20796f7572206f776e20766f74696e606482015261677360f01b608482015260a401610810565b6000848152600e602090815260408083208684529091529020600401610eed83826137c6565b600080516020613aff83398151915261190b8133612aa7565b4282116119725760405162461bcd60e51b815260206004820152602f60248201527f566f74696e67206379636c6520737461727420646174652068617320746f206260448201526e6520696e207468652066757475726560881b6064820152608401610810565b600682905560005b600c5461ffff82161015611a515760005b600354811015611a3e57600a6000600c8461ffff16815481106119b0576119b0613731565b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1661ffff1681526020019081526020016000206000600383815481106119ff576119ff613731565b60009182526020808320909101546001600160a01b031683528201929092526040019020805461ffff1916905580611a368161387f565b91505061198b565b5080611a4981613580565b91505061197a565b506040805160008152602081019182905251611a6f91600c91612efa565b505050565b600080516020613aff833981519152611a8d8133612aa7565b6040805160208082018352600091829052868252600e815282822086835290528190209051600080516020613adf83398151915291611ad1916005909101906137ba565b604051809103902003611b475760405162461bcd60e51b815260206004820152603860248201527f46697273742061727469636c6520636f6e74656e7420636865636b2069706673604482015277081a185cda081a185cc81d1bc8189948185cdcda59db995960421b6064820152608401610810565b600083815260076020908152604082208054600181018255908352912001610eed83826137c6565b600080516020613aff833981519152611b888133612aa7565b611ba0600080516020613b3f83398151915283611df4565b15611c025760405162461bcd60e51b815260206004820152602c60248201527f436974697a656e20726f6c6520746f2074686973206164647265737320616c7260448201526b1958591e4819dc985b9d195960a21b6064820152608401610810565b611c1a600080516020613b3f83398151915283612c2d565b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613b5f833981519152611c868133612aa7565b611c9e600080516020613b1f83398151915284611df4565b15611d075760405162461bcd60e51b815260206004820152603360248201527f506f6c69746963616c206163746f7220726f6c6520746f2074686973206164646044820152721c995cdcc8185b1c99591e4819dc985b9d1959606a1b6064820152608401610810565b611d1f600080516020613b1f83398151915284612c2d565b506040805180820182526001600160a01b0393841680825261ffff93841660208084019182526000838152600490915293842092518354915196166001600160b01b031990911617600160a01b9590941694909402929092179091556003805460018101825591527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319169091179055565b600c8181548110611dcc57600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020613b5f833981519152611e368133612aa7565b611e4e600080516020613aff83398151915283611df4565b15611eae5760405162461bcd60e51b815260206004820152602a60248201527f41646d696e20726f6c6520746f2074686973206164647265737320616c726561604482015269191e4819dc985b9d195960b21b6064820152608401610810565b611ec6600080516020613aff83398151915283612c2d565b50600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b600080516020613b1f833981519152611f328133612aa7565b6000828152600d60205260409020600201546001600160a01b03163314611fba5760405162461bcd60e51b815260206004820152603660248201527f4f6e6c79207468652063726561746f72206f662074686520766f74696e6720696044820152751cc8185b1b1bddd959081d1bc818d85b98d95b081a5d60521b6064820152608401610810565b6000828152600d602052604090206004015442106120285760405162461bcd60e51b815260206004820152602560248201527f596f757220766f74696e67207374617274206461746520616c72656164792070604482015264185cdcd95960da1b6064820152608401610810565b506000908152600d60205260409020805461ff001916610100179055565b600e602090815260009283526040808420909152908252902080546001820154600283018054929360ff808416946101008504909116936201000090046001600160a01b03169290612097906135e3565b80601f01602080910402602001604051908101604052809291908181526020018280546120c3906135e3565b80156121105780601f106120e557610100808354040283529160200191612110565b820191906000526020600020905b8154815290600101906020018083116120f357829003601f168201915b5050506003840154600485018054949560ff909216949193509150612134906135e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612160906135e3565b80156121ad5780601f10612182576101008083540402835291602001916121ad565b820191906000526020600020905b81548152906001019060200180831161219057829003601f168201915b5050505050908060050180546121c2906135e3565b80601f01602080910402602001604051908101604052809291908181526020018280546121ee906135e3565b801561223b5780601f106122105761010080835404028352916020019161223b565b820191906000526020600020905b81548152906001019060200180831161221e57829003601f168201915b505050505090806006018054611636906135e3565b60008281526020818152604080832083805290915281205460ff1661229957506000828152602081815260408083206001600160a01b038516845290915290205460ff16611537565b50600192915050565b6008602052816000526040600020818154811061173757600080fd5b6007602052816000526040600020818154811061173757600080fd5b600f8181548110610ce357600080fd5b600080516020613aff8339815191526123038133612aa7565b6000838152600d60205260409020600201546001600160a01b031661235e5760405162461bcd60e51b8152602060048201526011602482015270566f74696e67206e6f742065786973747360781b6044820152606401610810565b6000838152600d60205260409020600601610ddd83826137c6565b600080516020613aff8339815191526123928133612aa7565b6000838152600d602052604090206004015442106123c25760405162461bcd60e51b81526004016108109061394b565b6000838152600e602090815260408083208584529091529020600101546201000090046001600160a01b031661240a5760405162461bcd60e51b815260040161081090613898565b600082815260076020526040902054600a111561249f5760405162461bcd60e51b81526020600482015260596024820152600080516020613b7f83398151915260448201527f696d756d206e756d626572206f6620636f6e74656e74207265616420636865636064820152786b20616e737765727320746f20746869732061727469636c6560381b608482015260a401610810565b506000918252600e6020908152604080842092845291905290206001908101805460ff19169091179055565b6000828152600160205260409020546117119033612aa7565b600080516020613aff8339815191526124fd8133612aa7565b6000838152600d6020526040902060040154421061252d5760405162461bcd60e51b81526004016108109061394b565b6000838152600e602090815260408083208584529091529020600101546201000090046001600160a01b03166125755760405162461bcd60e51b815260040161081090613898565b6040805160208082018352600091829052858252600e815282822085835290528190209051600080516020613adf833981519152916125b9916004909101906137ba565b60405180910390200361261a5760405162461bcd60e51b815260206004820152602360248201527f4e6f20726573706f6e73652062656c6f6e677320746f20746869732061727469604482015262636c6560e81b6064820152608401610810565b600082815260086020526040902054600a11156126be5760405162461bcd60e51b81526020600482015260626024820152600080516020613b7f83398151915260448201527f696d756d206e756d626572206f6620636f6e74656e7420726573706f6e73652060648201527f7265616420636865636b20616e737765727320746f20746869732061727469636084820152616c6560f01b60a482015260c401610810565b506000918252600e602090815260408084209284529190529020600101805461ff001916610100179055565b600080516020613b1f8339815191526127038133612aa7565b33600090815260046020908152604080832054600b83528184208885529092529091205461ffff600160a01b90920482169116106127a95760405162461bcd60e51b815260206004820152603e60248201527f596f7520646f6e27742068617665206d6f726520637265646974202872656c6160448201527f74656420746f207468697320766f74696e672920746f207075626c69736800006064820152608401610810565b60006127b442612b25565b33856040516020016127c89392919061397b565b60408051601f1981840301815282825280516020918201206101208401835288845260008483018181528585018281523360608801908152608088018c81528b151560a08a01528751808801895285815260c08a01528751808801895285815260e08a015287518088018952858152610100808b01919091528e8652600e885288862087875290975296909320875181559151600183018054925194516001600160a01b0316620100000262010000600160b01b031995151590970261ff00199215159290921661ffff1990931692909217179290921693909317905591519193509060028201906128ba90826137c6565b5060a082015160038201805460ff191691151591909117905560c082015160048201906128e790826137c6565b5060e082015160058201906128fc90826137c6565b50610100820151600682019061291290826137c6565b505060108054600181019091557f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720182905550336000908152600b602090815260408083208884529091528120805461ffff169161296f83613580565b91906101000a81548161ffff021916908361ffff160217905550505050505050565b60608060008333866040516020016129ab939291906139c2565b60408051601f1981840301815291905280516020909101209050600160005b6020811015612a9c5760008382602081106129e7576129e7613731565b1a90506129f56002836138f6565b600003612a1057612a0960ff821684613569565b9250612a20565b612a1d60ff821684613519565b92505b6004612a2d836001613519565b612a3791906138f6565b600003612a89576000612a4a89856138f6565b612a55906001613519565b905085612a6182612b25565b604051602001612a729291906139fc565b604051602081830303815290604052955060019350505b5080612a948161387f565b9150506129ca565b509195945050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661135957612ae3816001600160a01b03166014612d2b565b612aee836020612d2b565b604051602001612aff929190613a38565b60408051601f198184030181529082905262461bcd60e51b82526108109160040161336f565b606081600003612b4c5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b765780612b608161387f565b9150612b6f9050600a83613555565b9150612b50565b6000816001600160401b03811115612b9057612b90613048565b6040519080825280601f01601f191660200182016040528015612bba576020820181803683370190505b5090505b8415612c2557612bcf60018361352c565b9150612bdc600a866138f6565b612be7906030613519565b60f81b818381518110612bfc57612bfc613731565b60200101906001600160f81b031916908160001a905350612c1e600a86613555565b9450612bbe565b949350505050565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6113598282604051602401612c9c929190613aa5565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612ecd565b612cd58282612aa7565b6000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000612d3a836002613569565b612d45906002613519565b6001600160401b03811115612d5c57612d5c613048565b6040519080825280601f01601f191660200182016040528015612d86576020820181803683370190505b509050600360fc1b81600081518110612da157612da1613731565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612dd057612dd0613731565b60200101906001600160f81b031916908160001a9053506000612df4846002613569565b612dff906001613519565b90505b6001811115612e77576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612e3357612e33613731565b1a60f81b828281518110612e4957612e49613731565b60200101906001600160f81b031916908160001a90535060049490941c93612e7081613ac7565b9050612e02565b508315612ec65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610810565b9392505050565b612ed681612ed9565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b82805482825590600052602060002090600f01601090048101928215612f935791602002820160005b83821115612f6357835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612f23565b8015612f915782816101000a81549061ffff0219169055600201602081600101049283019260010302612f63565b505b50612f9f929150612fa3565b5090565b5b80821115612f9f5760008155600101612fa4565b600080600060408486031215612fcd57600080fd5b83356001600160401b0380821115612fe457600080fd5b818601915086601f830112612ff857600080fd5b81358181111561300757600080fd5b87602082850101111561301957600080fd5b6020928301989097509590910135949350505050565b60006020828403121561304157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261306f57600080fd5b81356001600160401b038082111561308957613089613048565b604051601f8301601f19908116603f011681019082821181831017156130b1576130b1613048565b816040528381528660208588010111156130ca57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156130fd57600080fd5b8235915060208301356001600160401b0381111561311a57600080fd5b6131268582860161305e565b9150509250929050565b60008060006060848603121561314557600080fd5b833592506020840135915060408401356001600160401b0381111561316957600080fd5b6131758682870161305e565b9150509250925092565b8035801515811461318f57600080fd5b919050565b600080600080608085870312156131aa57600080fd5b843593506020850135925060408501356001600160401b038111156131ce57600080fd5b6131da8782880161305e565b9250506131e96060860161317f565b905092959194509250565b80356001600160a01b038116811461318f57600080fd5b6000806040838503121561321e57600080fd5b8235915061322e602084016131f4565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561327257835160ff1683529284019291840191600101613253565b50909695505050505050565b60005b83811015613299578181015183820152602001613281565b50506000910152565b600081518084526132ba81602086016020860161327e565b601f01601f19169290920160200192915050565b89151581528815156020820152604081018890526001600160a01b03871660608201526101206080820181905260009061330a838201896132a2565b60a084018890526001600160401b0387811660c0860152861660e0850152838103610100850152905061333d81856132a2565b9c9b505050505050505050505050565b6000806040838503121561336057600080fd5b50508035926020909101359150565b602081526000612ec660208301846132a2565b6000806040838503121561339557600080fd5b61339e836131f4565b946020939093013593505050565b6000602082840312156133be57600080fd5b612ec6826131f4565b803561ffff8116811461318f57600080fd5b600080604083850312156133ec57600080fd5b6133f5836133c7565b915061322e602084016131f4565b6000806040838503121561341657600080fd5b61341f836131f4565b915061322e602084016133c7565b898152881515602082015287151560408201526001600160a01b038716606082015261012060808201819052600090613468838201896132a2565b905086151560a084015282810360c084015261348481876132a2565b905082810360e084015261349881866132a2565b905082810361010084015261333d81856132a2565b6000806000606084860312156134c257600080fd5b8335925060208401356001600160401b038111156134df57600080fd5b6134eb8682870161305e565b9250506134fa6040850161317f565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561153757611537613503565b8181038181111561153757611537613503565b634e487b7160e01b600052601260045260246000fd5b6000826135645761356461353f565b500490565b808202811582820484141761153757611537613503565b600061ffff80831681810361359757613597613503565b6001019392505050565b600085516135b3818460208a0161327e565b606086901b6001600160601b03191690830190815283856014830137600093016014019283525090949350505050565b600181811c908216806135f757607f821691505b60208210810361361757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611a6f57600081815260208120601f850160051c810160208610156136445750805b601f850160051c820191505b818110156112bd57828155600101613650565b600019600383901b1c191660019190911b1790565b6001600160401b0383111561368f5761368f613048565b6136a38361369d83546135e3565b8361361d565b6000601f8411600181146136d157600085156136bf5750838201355b6136c98682613663565b845550610eed565b600083815260209020601f19861690835b8281101561370257868501358255602094850194600190920191016136e2565b508682101561371f5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b600052603260045260246000fd5b60008154613754816135e3565b6001828116801561376c5760018114613781576137b0565b60ff19841687528215158302870194506137b0565b8560005260208060002060005b858110156137a75781548a82015290840190820161378e565b50505082870194505b5050505092915050565b6000612ec68284613747565b81516001600160401b038111156137df576137df613048565b6137f3816137ed84546135e3565b8461361d565b602080601f83116001811461382257600084156138105750858301515b61381a8582613663565b8655506112bd565b600085815260208120601f198616915b8281101561385157888601518255948401946001909101908401613832565b508582101561386f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161389157613891613503565b5060010190565b60208082526012908201527141727469636c65206e6f742065786973747360701b604082015260600190565b60006138d96138d38387613747565b85613747565b60609390931b6001600160601b0319168352505060140192915050565b6000826139055761390561353f565b500690565b600060ff83168061391d5761391d61353f565b8060ff84160691505092915050565b600060ff821660ff810361394257613942613503565b60010192915050565b602080825260169082015275159bdd1a5b99c8185b1c9958591e481cdd185c9d195960521b604082015260600190565b6000845161398d81846020890161327e565b606085901b6001600160601b03191690830190815283516139b581601484016020880161327e565b0160140195945050505050565b600084516139d481846020890161327e565b60609490941b6001600160601b03191691909301908152601481019190915260340192915050565b60008351613a0e81846020880161327e565b601f60fa1b9083019081528351613a2c81600184016020880161327e565b01600101949350505050565b7402832b936b4b9b9b4b7b7399d1030b1b1b7bab73a1605d1b815260008351613a6881601585016020880161327e565b7001034b99036b4b9b9b4b733903937b6329607d1b6015918401918201528351613a9981602684016020880161327e565b01602601949350505050565b604081526000613ab860408301856132a2565b90508260208301529392505050565b600081613ad657613ad6613503565b50600019019056fec5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470b346b2ddc13f08bd9685b83a95304a79a2caac0aa7aa64129e1ae9f4361b46619f70d138cbbd87297896478196b4493d9dceaca01f5883ecbd7bee66d300348d313691be6e710b5e9c97c695d02c9e24926f986402f826152f3b2970694f72c9d9d79e7f33c5bfc4f44a41571391ba287235a250c1b3651d666e8b35b4d8ad9a596f75206861766520746f20616464206174206c6561737420746865206d696ea26469706673582212208b96f749ab4a7653dfa87d744de76778d35fc66492b4a7ac362db6b7eed22da764736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Márton Sándor Horváth, email: hmartonsandor{@}gmail.com",
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "cancelMyVoting(bytes32)": {
        "params": {
          "_votingKey": "- identifies a registered voting"
        }
      },
      "getMyArticleCompletePuzzle(uint256,string)": {
        "params": {
          "articleIpfsHash": "This is the hash id of the article stored in an ipfs network",
          "articleWordCount": "This is the total number of words what the article contains"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "See {grantRole} and {revokeRole}.                  To change a role's admin, use {_setRoleAdmin}.",
        "params": {
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Caller must have admin role for the `role`.                  Emits {RoleGranted Event}.",
        "params": {
          "account": "Address of the account to which the role is being granted.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`.",
        "params": {
          "account": "Address of the account for which the role is being checked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "hasRoleWithSwitch(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`.                  Role restrictions can be swtiched on and off:                      - If address(0) has ROLE, then the ROLE restrictions                        don't apply.                      - If address(0) does not have ROLE, then the ROLE                        restrictions will apply.",
        "params": {
          "account": "Address of the account for which the role is being checked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Caller must have the `role`, with caller being the same as `account`.                  Emits {RoleRevoked Event}.",
        "params": {
          "account": "Address of the account from which the role is being revoked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Caller must have admin role for the `role`.                  Emits {RoleRevoked Event}.",
        "params": {
          "account": "Address of the account from which the role is being revoked.",
          "role": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
        }
      }
    },
    "title": "Balanced Voting System: Voting contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelMyVoting(bytes32)": {
        "notice": "If you cancel your voting you can't get back your voting credit"
      },
      "getMyArticleCompletePuzzle(uint256,string)": {
        "notice": "getMyArticleCompletePuzzle generates a series of indexes marking the position of a word in the article At article complete process Voter has to pick the first and last letter or these words from the article marked by this information. This is a unique way to prove if voter read an article as nobody can copy, re use this answer"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Returns the admin role that controls the specified role."
      },
      "grantRole(bytes32,address)": {
        "notice": "Grants a role to an account, if not previously granted."
      },
      "hasRole(bytes32,address)": {
        "notice": "Checks whether an account has a particular role."
      },
      "hasRoleWithSwitch(bytes32,address)": {
        "notice": "Checks whether an account has a particular role;                  role restrictions can be swtiched on and off."
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes role from the account."
      },
      "revokeRole(bytes32,address)": {
        "notice": "Revokes role from an account."
      }
    },
    "notice": "@dev",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "_hasRole",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 18,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "_getRoleAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 725,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "admins",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 728,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "politicalActors",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 733,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "politicalActorProfiles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoliticalActorProfile)722_storage)"
      },
      {
        "astId": 736,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "citizens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 908,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "firstVotingCycleStartDate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 982,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "articleContentReadCheckAnswers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 987,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "articleContentResponseReadCheckAnswers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 992,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "votingContentReadCheckAnswers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 998,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "votingCycleStartVoteCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_mapping(t_address,t_uint16))"
      },
      {
        "astId": 1004,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "publishArticleToVotingsCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint16))"
      },
      {
        "astId": 1007,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "votingCycleIndexes",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 1012,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "votings",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(Voting)964_storage)"
      },
      {
        "astId": 1019,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "proConArticles",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(ProConArticle)945_storage))"
      },
      {
        "astId": 1022,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "votingKeys",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1025,
        "contract": "contracts/BVS_Voting.sol:BVS_Voting",
        "label": "articleKeys",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint16))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint16)"
      },
      "t_mapping(t_address,t_struct(PoliticalActorProfile)722_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BVS_Roles.PoliticalActorProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PoliticalActorProfile)722_storage"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(ProConArticle)945_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct BVS_Voting.ProConArticle))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(ProConArticle)945_storage)"
      },
      "t_mapping(t_bytes32,t_struct(ProConArticle)945_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BVS_Voting.ProConArticle)",
        "numberOfBytes": "32",
        "value": "t_struct(ProConArticle)945_storage"
      },
      "t_mapping(t_bytes32,t_struct(Voting)964_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BVS_Voting.Voting)",
        "numberOfBytes": "32",
        "value": "t_struct(Voting)964_storage"
      },
      "t_mapping(t_bytes32,t_uint16)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_mapping(t_address,t_uint16))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(address => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint16)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoliticalActorProfile)722_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Roles.PoliticalActorProfile",
        "members": [
          {
            "astId": 719,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 721,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "votingCycleTotalCredits",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProConArticle)945_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Voting.ProConArticle",
        "members": [
          {
            "astId": 928,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "votingKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 930,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "isArticleApproved",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 932,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "isResponseApproved",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 934,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "publisher",
            "offset": 2,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 936,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "articleIpfsHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 938,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "isVoteOnA",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 940,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "responseStatementIpfsHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 942,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "articleContentCheckQuizIpfsHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 944,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "responseContentCheckQuizIpfsHash",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Voting)964_storage": {
        "encoding": "inplace",
        "label": "struct BVS_Voting.Voting",
        "members": [
          {
            "astId": 947,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "approved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 949,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "cancelled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 951,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "key",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 953,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 955,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "contentIpfsHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 957,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 959,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "voteOnAScore",
            "offset": 0,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 961,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "voteOnBScore",
            "offset": 8,
            "slot": "5",
            "type": "t_uint64"
          },
          {
            "astId": 963,
            "contract": "contracts/BVS_Voting.sol:BVS_Voting",
            "label": "votingContentCheckQuizIpfsHash",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}